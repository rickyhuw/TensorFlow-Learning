node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_9778"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_9777"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content: "\000\000\000\000\000\000C@\000\000\000\000\000\000:@\000\000\000\000\000\200A@\000\000\000\000\000\200A@\000\000\000\000\000\200A@\000\000\000\000\000\000K@\000\000\000\000\000\000\000@\000\000\000\000\000\000;@\000\000\000\000\000\000,@\000\000\000\000\000\000\020@\000\000\000\000\000\000M@\000\000\000\000\000\0004@\000\000\000\000\000\200C@\000\000\000\000\000\000,@\000\000\000\000\000\200K@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\000?@\000\000\000\000\000\000?@\000\000\000\000\000\200A@\000\000\000\000\000\000A@\000\000\000\000\000\000.@\000\000\000\000\000\000<@\000\000\000\000\000\000 @\000\000\000\000\000\000C@\000\000\000\000\000\000C@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\000D@\000\000\000\000\000\000D@\000\000\000\000\000\000D@\000\000\000\000\000\200P@\000\000\000\000\000\000<@\000\000\000\000\000\000E@\000\000\000\000\000\000E@\000\000\000\000\000\0005@\000\000\000\000\000\0002@\000\000\000\000\000\000,@\000\000\000\000\000\000D@\000\000\000\000\000\000;@\000\000\000\000\000\000;@\000\000\000\000\000\000\010@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0002@\000\000\000\000\000\000\034@\000\000\000\000\000\0005@\000\000\000\000\000\200H@\000\000\000\000\000\000=@\000\000\000\000\000@P@\000\000\000\000\000@P@\000\000\000\000\000\0005@\000\000\000\000\000\200<@\000\000\000\000\000\000\024@\000\000\000\000\000\000&@\000\000\000\000\000\0006@\000\000\000\000\000\000C@\000\000\000\000\000\200F@\000\000\000\000\000\000\020@\000\000\000\000\000\000\020@\000\000\000\000\000\000\020@\000\000\000\000\000\000=@\000\000\000\000\000\0003@\000\000\000\000\000\0001@\000\000\000\000\000\000:@\000\000\000\000\000\000@@\000\000\000\000\000\0000@\000\000\000\000\000\0005@\000\000\000\000\000\000:@\000\000\000\000\000\000@@\000\000\000\000\000\0009@\000\000\000\000\000\0009@\000\000\000\000\000\0009@\217\302\365(\\\217\352?\000\000\000\000\000\000>@\000\000\000\000\000\0006@\000\000\000\000\000\000=@\000\000\000\000\000\000=@\000\000\000\000\000\000<@\000\000\000\000\000\0001@\000\000\000\000\000\200@@\000\000\000\000\000\0000@\000\000\000\000\000\0000@\000\000\000\000\000\0007@\000\000\000\000\000\0008@\000\000\000\000\000\000=@\000\000\000\000\000\0004@\000\000\000\000\000\000G@\000\000\000\000\000\000:@\000\000\000\000\000\200M@\000\000\000\000\000\200M@\000\000\000\000\000\300Q@\000\000\000\000\000\0007@\000\000\000\000\000\000A@\000\000\000\000\000\000A@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\0005@\000\000\000\000\000\200@@\000\000\000\000\000\200B@\000\000\000\000\000\000<@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\000C@\000\000\000\000\000\000C@\000\000\000\000\000\200G@\000\000\000\000\000\000-@\000\000\000\000\000\0006@\000\000\000\000\000\0004@\000\000\000\000\000\0001@\000\000\000\000\000\0005@\000\000\000\000\000\240Q@\000\000\000\000\000\000=@\000\000\000\000\000\0008@\000\000\000\000\000\000\000@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000@@@\000\000\000\000\000@@@\000\000\000\000\000\000K@\000\000\000\000\000\000(@\000\000\000\000\000\000(@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\200F@\000\000\000\000\000\200@@\000\000\000\000\000\0004@\000\000\000\000\000\200G@\000\000\000\000\000\000=@\000\000\000\000\000\0009@\000\000\000\000\000\0007@\000\000\000\000\000\0003@\000\000\000\000\000\200B@\000\000\000\000\000\0000@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0006@\000\000\000\000\000\0008@\000\000\000\000\000\0003@\000\000\000\000\000\0002@\000\000\000\000\000\0003@\000\000\000\000\000\000;@\000\000\000\000\000\000\"@\000\000\000\000\000@B@\000\000\000\000\000\000E@\000\000\000\000\000\200I@\000\000\000\000\000\0006@\000\000\000\000\000\300K@\000\000\000\000\000@D@\000\000\000\000\000@D@\000\000\000\000\000\200I@\000\000\000\000\000\0000@\000\000\000\000\000\000>@\000\000\000\000\000\000>@\000\000\000\000\000\000>@\000\000\000\000\000\000F@\000\000\000\000\000\000D@\000\000\000\000\000\000:@\000\000\000\000\000\0001@\000\000\000\000\000\000\360?\000\000\000\000\000\000\"@\000\000\000\000\000\000\"@\000\000\000\000\000\200F@\000\000\000\000\000\200F@\000\000\000\000\000\000<@\000\000\000\000\000\200N@\000\000\000\000\000\000\020@\000\000\000\000\000\000\360?\000\000\000\000\000\0005@\000\000\000\000\000\000L@\000\000\000\000\000\0002@\000\000\000\000\000\0002@\000\000\000\000\000\000I@\000\000\000\000\000\000>@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\000\"@\000\000\000\000\000\000\360?\000\000\000\000\000\000\020@\000\000\000\000\000\000\020@\000\000\000\000\000\000\020@\000\000\000\000\000\200F@\000\000\000\000\000\000D@\000\000\000\000\000\000B@\000\000\000\000\000\000@@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\000\010@\000\000\000\000\000\000F@\000\000\000\000\000\000M@\000\000\000\000\000\000M@\000\000\000\000\000\000E@\000\000\000\000\000\000E@\000\000\000\000\000\0008@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\000A@\000\000\000\000\000\300F@\000\000\000\000\000\0002@\000\000\000\000\000\000\000@\000\000\000\000\000\000@@\000\000\000\000\000\000:@\000\000\000\000\000\0000@\000\000\000\000\000\000D@\000\000\000\000\000\0008@\000\000\000\000\000\200A@\000\000\000\000\000\0006@\000\000\000\000\000\000>@\000\000\000\000\000\000>@\000\000\000\000\000\000?@\000\000\000\000\000\000;@\000\000\000\000\000\000E@\000\000\000\000\000\000@@\000\000\000\000\000\000>@\000\000\000\000\000\0000@\000\000\000\000\000\000;@\000\000\000\000\000\200I@\000\000\000\000\000\200I@\000\000\000\000\000\000C@\000\000\000\000\000\0006@\000\000\000\000\000\0003@\000\000\000\000\000\2004@\000\000\000\000\000\0002@\000\000\000\000\000\0002@\000\000\000\000\000\200A@\000\000\000\000\000\000=@\000\000\000\000\000\200M@\000\000\000\000\000\000\024@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\000F@\000\000\000\000\000\000 @\000\000\000\000\000\0003@\000\000\000\000\000\200@@\000\000\000\000\000\200@@\000\000\000\000\000\200@@\000\000\000\000\000\000=@\000\000\000\000\000\0006@\000\000\000\000\000\000>@\000\000\000\000\000\000F@\000\000\000\000\000\0009@\000\000\000\000\000\0008@\000\000\000\000\000\200B@\000\000\000\000\000\000K@\000\000\000\000\000\000K@\000\000\000\000\000\000=@\000\000\000\000\000\000O@\000\000\000\000\000\000>@\000\000\000\000\000\200D@\000\000\000\000\000\000=@\000\000\000\000\000\000=@\000\000\000\000\000\000>@\000\000\000\000\000\200A@\000\000\000\000\000\000I@\000\000\000\000\000\000I@\000\000\000\000\000\000\010@\000\000\000\000\000\000J@\000\000\000\000\000\000D@\000\000\000\000\000\000D@\000\000\000\000\000\000B@\000\000\000\000\000\0000@\000\000\000\000\000\0009@\000\000\000\000\000\000M@\000\000\000\000\000\200A@\000\000\000\000\000\200A@\000\000\000\000\000\0009@\000\000\000\000\000\200D@\000\000\000\000\000\200B@\000\000\000\000\000\200B@\000\000\000\000\000\200O@\000\000\000\000\000\200F@\000\000\000\000\000\200F@\000\000\000\000\000\000\034@\000\000\000\000\000\200A@\000\000\000\000\000@P@\000\000\000\000\000\000<@\000\000\000\000\000\0000@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\200@@\000\000\000\000\000\000>@\000\000\000\000\000\0006@\000\000\000\000\000\000E@\000\000\000\000\000\0006@\000\000\000\000\000\000:@\000\000\000\000\000\0003@\000\000\000\000\000\000B@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\2007@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\000I@\000\000\000\000\000\000I@\000\000\000\000\000\000I@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\0003@q=\n\327\243p\355?q=\n\327\243p\355?\000\000\000\000\000\0001@\000\000\000\000\000\000>@\000\000\000\000\000\000>@\000\000\000\000\000\0008@\000\000\000\000\000\0002@\000\000\000\000\000\000:@\000\000\000\000\000\000<@\000\000\000\000\000\200E@\000\000\000\000\000\000:@\000\000\000\000\000\0008@\000\000\000\000\000\000K@\000\000\000\000\000\000?@\000\000\000\000\000\000D@\000\000\000\000\000\0006@\000\000\000\000\000\000;@\000\000\000\000\000\000>@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\000B@\000\000\000\000\000\200N@\000\000\000\000\000\000B@\000\000\000\000\000\000?@\000\000\000\000\000\0000@\000\000\000\000\000\0000@\000\000\000\000\000\300F@\000\000\000\000\000\000C@\000\000\000\000\000\0000@\000\000\000\000\000\0000@\000\000\000\000\000\0000@\000\000\000\000\000\000=@\000\000\000\000\000\200D@\000\000\000\000\000\200F@\000\000\000\000\000\200F@\000\000\000\000\000\000\000@\000\000\000\000\000\0008@\000\000\000\000\000\000<@\000\000\000\000\000\0009@\000\000\000\000\000\000B@\000\000\000\000\000\0008@\000\000\000\000\000\000D@\000\000\000\000\000\000D@\000\000\000\000\000\000\010@\000\000\000\000\000\000E@\000\000\000\000\000\0007@\000\000\000\000\000\0007@\000\000\000\000\000\000.@\000\000\000\000\000\0009@\000\000\000\000\000\0009@\000\000\000\000\000\000<@\000\000\000\000\000\0006@\000\000\000\000\000\000C@\000\000\000\000\000\000C@\000\000\000\000\000\000C@\000\000\000\000\000\000D@\000\000\000\000\000\000=@\000\000\000\000\000\200F@\000\000\000\000\000\200A@\000\000\000\000\000\200A@\000\000\000\000\000\000>@\000\000\000\000\000\000N@\000\000\000\000\000\000N@\000\000\000\000\000\000N@\000\000\000\000\000\0008@\000\000\000\000\000\0009@\000\000\000\000\000\0002@\000\000\000\000\000\0003@\000\000\000\000\000\0006@\000\000\000\000\000\000\010@\000\000\000\000\000\000\010@\000\000\000\000\000\0006@\000\000\000\000\000\000;@\000\000\000\000\000\0004@\000\000\000\000\000\0003@\000\000\000\000\000\000E@\000\000\000\000\000\000\360?\000\000\000\000\000\000@@\000\000\000\000\000\200A@\000\000\000\000\000\200A@\000\000\000\000\000\0002@\000\000\000\000\000\000\360?\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\0001@\000\000\000\000\000\000B@\000\000\000\000\000\0005@\000\000\000\000\000\000<@\000\000\000\000\000\0007@\000\000\000\000\000\0008@\000\000\000\000\000\0006@\000\000\000\000\000\000?@\000\000\000\000\000\000G@\000\000\000\000\000\0007@\000\000\000\000\000\000<@\000\000\000\000\000\200C@\000\000\000\000\000\000:@\000\000\000\000\000\0005@\000\000\000\000\000\000<@\000\000\000\000\000\0004@\000\000\000\000\000\000A@\000\000\000\000\000\200I@\000\000\000\000\000\000\010@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\200@@\000\000\000\000\000\200@@\000\000\000\000\000\000F@\000\000\000\000\000\000F@\000\000\000\000\000\000A@\000\000\000\000\000\0002@\000\000\000\000\000\000>@\000\000\000\000\000\000$@\000\000\000\000\000\000$@\000\000\000\000\000\0005@\000\000\000\000\000\000=@\000\000\000\000\000\000<@\000\000\000\000\000\0002@\000\000\000\000\000\0002@\000\000\000\000\000\000<@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\000@@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\000E@\000\000\000\000\000\0001@\000\000\000\000\000\000I@\000\000\000\000\000\000,@\000\000\000\000\000\0005@\000\000\000\000\000\0008@\000\000\000\000\000\000P@\000\000\000\000\000\000?@\000\000\000\000\000\200F@\000\000\000\000\000\0004@\000\000\000\000\000\0009@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\000\020@\000\000\000\000\000\000*@\000\000\000\000\000\000A@\000\000\000\000\000\000\024@\000\000\000\000\000\000J@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\000>@\000\000\000\000\000\200H@\000\000\000\000\000\200H@\000\000\000\000\000\000=@\000\000\000\000\000@P@\000\000\000\000\000@P@\000\000\000\000\000\000I@\000\000\000\000\000\000I@\000\000\000\000\000\000H@\000\000\000\000\000\000A@\000\000\000\000\000\200G@\000\000\000\000\000\000H@\000\000\000\000\000\000H@\000\000\000\000\000\000C@\000\000\000\000\000\000C@\000\000\000\000\000\000L@\000\000\000\000\000\000L@\000\000\000\000\000\000\350?\000\000\000\000\000\000\350?\000\000\000\000\000\000C@\000\000\000\000\000\200@@\000\000\000\000\000\0007@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\000A@\000\000\000\000\000\000=@\000\000\000\000\000\0006@\000\000\000\000\000\000\000@\000\000\000\000\000\000\"@\000\000\000\000\000\000\"@\000\000\000\000\000\000I@\000\000\000\000\000\200O@\000\000\000\000\000\0009@\000\000\000\000\000\0009@\000\000\000\000\000\200A@\000\000\000\000\000\000M@\000\000\000\000\000\000>@\000\000\000\000\000\000\"@\000\000\000\000\000\000\"@\000\000\000\000\000\0005@\000\000\000\000\000\200K@\000\000\000\000\000\300Q@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\000K@\000\000\000\000\000\000K@\000\000\000\000\000\0009@\000\000\000\000\000\0008@\000\000\000\000\000\0001@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\200B@\000\000\000\000\000\0000@\000\000\000\000\000\0002@\000\000\000\000\000\200@@\000\000\000\000\000\200@@\000\000\000\000\000\000<@\000\000\000\000\000\000:@\000\000\000\000\000\000=@\000\000\000\000\000\000=@\000\000\000\000\000\000B@\000\000\000\000\000\000K@\000\000\000\000\000\0008@\000\000\000\000\000\200G@\000\000\000\000\000\000A@\000\000\000\000\000\000A@\000\000\000\000\000\000B@\000\000\000\000\000\000@@\000\000\000\000\000\000>@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\000F@\000\000\000\000\000\000F@\000\000\000\000\000@D@\000\000\000\000\000\000I@\000\000\000\000\000\000I@\000\000\000\000\000\200C@\000\000\000\000\000\0007@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\0001@\000\000\000\000\000\0001@\000\000\000\000\000\000>@\000\000\000\000\000\000\034@\000\000\000\000\000\200F@\000\000\000\000\000\000>@\000\000\000\000\000\000>@\000\000\000\000\000\0006@\000\000\000\000\000\000B@\000\000\000\000\000\000\"@\000\000\000\000\000\000&@\000\000\000\000\000\000@@\000\000\000\000\000\000I@\000\000\000\000\000\000P@\000\000\000\000\000\0003@\000\000\000\000\000\0003@\000\000\000\000\000\200@@\000\000\000\000\000\000 @\000\000\000\000\000\0001@\000\000\000\000\000\000;@\000\000\000\000\000\000;@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\000O@\000\000\000\000\000\000H@\000\000\000\000\000\000H@\000\000\000\000\000\200C@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\000D@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\000<@\000\000\000\000\000\0008@\000\000\000\000\000\0003@\000\000\000\000\000\000=@\000\000\000\000\000\000=@\000\000\000\000\000\000@@\000\000\000\000\000\000O@\000\000\000\000\000\200J@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\0000@\000\000\000\000\000\0003@\000\000\000\000\000\000A@\000\000\000\000\000\200C@\000\000\000\000\000\200C@\000\000\000\000\000\000@@\000\000\000\000\000\0009@\000\000\000\000\000\200C@\000\000\000\000\000\000K@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\0002@\000\000\000\000\000\200G@\000\000\000\000\000\000N@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\200A@\000\000\000\000\000\000J@\000\000\000\000\000\200G@\000\000\000\000\000\200G@\000\000\000\000\000\200B@\000\000\000\000\000\000B@\000\000\000\000\000\000B@\000\000\000\000\000\200H@\000\000\000\000\000\200H@\000\000\000\000\000\200H@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\000F@\000\000\000\000\000\200A@\000\000\000\000\000\000B@\000\000\000\000\000\000>@\000\000\000\000\000\000;@\000\000\000\000\000\0006@\000\000\000\000\000\000D@\000\000\000\000\000\200C@\000\000\000\000\000\200C@\000\000\000\000\000\200C@\000\000\000\000\000\200C@\000\000\000\000\000\200A@\000\000\000\000\000\0008@\000\000\000\000\000\000A@\000\000\000\000\000\000:@\000\000\000\000\000\000\020@\000\000\000\000\000\000:@\000\000\000\000\000\000;@\000\000\000\000\000\000E@\000\000\000\000\000\0004@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\200N@\000\000\000\000\000\200L@\000\000\000\000\000\0005@\000\000\000\000\000\000:@\000\000\000\000\000\000:@\000\000\000\000\000\000T@\000\000\000\000\000\200I@\000\000\000\000\000\000@@\000\000\000\000\000\000@@\000\000\000\000\000\000\"@\000\000\000\000\000\000<@\000\000\000\000\000\000@@\000\000\000\000\000\000?@\000\000\000\000\000\200D@\000\000\000\000\000\200D@\000\000\000\000\000\0004@\000\000\000\000\000\0008@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\000\350?\000\000\000\000\000\000H@\000\000\000\000\000\0003@\000\000\000\000\000\000L@\000\000\000\000\000\000L@\000\000\000\000\000\0007@\000\000\000\000\000\0007@\000\000\000\000\000\0002@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\0002@\000\000\000\000\000\0008@"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 655
          }
        }
        string_val: "C85"
        string_val: "C85"
        string_val: "C123"
        string_val: "C123"
        string_val: "C123"
        string_val: "E46"
        string_val: "E46"
        string_val: "E46"
        string_val: "E46"
        string_val: "G6"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "C103"
        string_val: "D56"
        string_val: "D56"
        string_val: "A6"
        string_val: "A6"
        string_val: "A6"
        string_val: "A6"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "B78"
        string_val: "D33"
        string_val: "D33"
        string_val: "B30"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "B28"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "F G73"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "E31"
        string_val: "E31"
        string_val: "E31"
        string_val: "E31"
        string_val: "A5"
        string_val: "D10 D12"
        string_val: "D10 D12"
        string_val: "D10 D12"
        string_val: "D10 D12"
        string_val: "D10 D12"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "C110"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "E101"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "D26"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "F E69"
        string_val: "D47"
        string_val: "C123"
        string_val: "C123"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "B86"
        string_val: "F2"
        string_val: "F2"
        string_val: "F2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "C2"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "B19"
        string_val: "B19"
        string_val: "B19"
        string_val: "B19"
        string_val: "A7"
        string_val: "A7"
        string_val: "A7"
        string_val: "C49"
        string_val: "C49"
        string_val: "C49"
        string_val: "C49"
        string_val: "C49"
        string_val: "C49"
        string_val: "F4"
        string_val: "F4"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "A32"
        string_val: "F2"
        string_val: "B4"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "B80"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "A31"
        string_val: "A31"
        string_val: "A31"
        string_val: "A31"
        string_val: "A31"
        string_val: "A31"
        string_val: "D36"
        string_val: "D36"
        string_val: "D36"
        string_val: "D15"
        string_val: "D15"
        string_val: "D15"
        string_val: "D15"
        string_val: "D15"
        string_val: "D15"
        string_val: "C93"
        string_val: "C93"
        string_val: "C93"
        string_val: "C93"
        string_val: "C93"
        string_val: "C93"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C83"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "D35"
        string_val: "D35"
        string_val: "D35"
        string_val: "G6"
        string_val: "C87"
        string_val: "C87"
        string_val: "C87"
        string_val: "C87"
        string_val: "C87"
        string_val: "B77"
        string_val: "B77"
        string_val: "B77"
        string_val: "B77"
        string_val: "B77"
        string_val: "E67"
        string_val: "B94"
        string_val: "B94"
        string_val: "B94"
        string_val: "B94"
        string_val: "B94"
        string_val: "C125"
        string_val: "C99"
        string_val: "C99"
        string_val: "C99"
        string_val: "C99"
        string_val: "C118"
        string_val: "C118"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "D7"
        string_val: "A19"
        string_val: "A19"
        string_val: "A19"
        string_val: "A19"
        string_val: "A19"
        string_val: "A19"
        string_val: "A19"
        string_val: "B49"
        string_val: "D"
        string_val: "D"
        string_val: "D"
        string_val: "D"
        string_val: "D"
        string_val: "C22 C26"
        string_val: "C106"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "B58 B60"
        string_val: "E101"
        string_val: "E101"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "C65"
        string_val: "C65"
        string_val: "E36"
        string_val: "C54"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "B57 B59 B63 B66"
        string_val: "C7"
        string_val: "E34"
        string_val: "E34"
        string_val: "E34"
        string_val: "E34"
        string_val: "E34"
        string_val: "E34"
        string_val: "C32"
        string_val: "C32"
        string_val: "D"
        string_val: "D"
        string_val: "B18"
        string_val: "B18"
        string_val: "C124"
        string_val: "C91"
        string_val: "C91"
        string_val: "C91"
        string_val: "C91"
        string_val: "C2"
        string_val: "E40"
        string_val: "E40"
        string_val: "T"
        string_val: "F2"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "C128"
        string_val: "C128"
        string_val: "C128"
        string_val: "C128"
        string_val: "C128"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "E33"
        string_val: "D37"
        string_val: "D37"
        string_val: "D37"
        string_val: "B35"
        string_val: "E50"
        string_val: "E50"
        string_val: "E50"
        string_val: "E50"
        string_val: "E50"
        string_val: "E50"
        string_val: "E50"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "C82"
        string_val: "B96 B98"
        string_val: "B96 B98"
        string_val: "B96 B98"
        string_val: "D36"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "G6"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "C78"
        string_val: "E10"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "C52"
        string_val: "E44"
        string_val: "B96 B98"
        string_val: "B96 B98"
        string_val: "B96 B98"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "C23 C25 C27"
        string_val: "A34"
        string_val: "A34"
        string_val: "A34"
        string_val: "A34"
        string_val: "C104"
        string_val: "C104"
        string_val: "C104"
        string_val: "C111"
        string_val: "C92"
        string_val: "C92"
        string_val: "C92"
        string_val: "E38"
        string_val: "D21"
        string_val: "D21"
        string_val: "D21"
        string_val: "E12"
        string_val: "E12"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "E63"
        string_val: "D"
        string_val: "D"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "A14"
        string_val: "B49"
        string_val: "B49"
        string_val: "C93"
        string_val: "B37"
        string_val: "B37"
        string_val: "B37"
        string_val: "B37"
        string_val: "B37"
        string_val: "C30"
        string_val: "C30"
        string_val: "C30"
        string_val: "C30"
        string_val: "D20"
        string_val: "D20"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "C22 C26"
        string_val: "B79"
        string_val: "C65"
        string_val: "C65"
        string_val: "C65"
        string_val: "C65"
        string_val: "C65"
        string_val: "C65"
        string_val: "C65"
        string_val: "E25"
        string_val: "E25"
        string_val: "E25"
        string_val: "D46"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "F33"
        string_val: "B73"
        string_val: "B73"
        string_val: "B73"
        string_val: "B18"
        string_val: "B18"
        string_val: "B18"
        string_val: "B18"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "C95"
        string_val: "B38"
        string_val: "B38"
        string_val: "B38"
        string_val: "B39"
        string_val: "B22"
        string_val: "B22"
        string_val: "B22"
        string_val: "B22"
        string_val: "C86"
        string_val: "C86"
        string_val: "C86"
        string_val: "C86"
        string_val: "C86"
        string_val: "C86"
        string_val: "C70"
        string_val: "C70"
        string_val: "C70"
        string_val: "C70"
        string_val: "C70"
        string_val: "C70"
        string_val: "A16"
        string_val: "A16"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "E67"
        string_val: "C101"
        string_val: "E25"
        string_val: "E25"
        string_val: "E25"
        string_val: "E25"
        string_val: "E25"
        string_val: "E44"
        string_val: "E44"
        string_val: "E44"
        string_val: "E44"
        string_val: "C68"
        string_val: "C68"
        string_val: "A10"
        string_val: "A10"
        string_val: "E68"
        string_val: "E68"
        string_val: "B41"
        string_val: "B41"
        string_val: "B41"
        string_val: "B41"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "D20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "A20"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "C125"
        string_val: "F4"
        string_val: "F4"
        string_val: "F4"
        string_val: "D19"
        string_val: "D19"
        string_val: "D19"
        string_val: "D19"
        string_val: "D50"
        string_val: "D50"
        string_val: "D9"
        string_val: "D9"
        string_val: "D9"
        string_val: "A23"
        string_val: "A23"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B50"
        string_val: "B35"
        string_val: "B35"
        string_val: "B35"
        string_val: "B35"
        string_val: "D33"
        string_val: "D33"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
        string_val: "A26"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 655
          }
        }
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "Q"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "C"
        string_val: "C"
        string_val: "S"
        string_val: "C"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "S"
        string_val: "Q"
        string_val: "Q"
        string_val: "S"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content: "<\275R\226!\322Q@33333\263\037@\315\314\314\314\314\214J@\232\231\231\231\231\031 @{\203/L\246\352 @fffff\356I@33333\0235@\025\035\311\345?D&@\212\216\344\362\037\022>@33333\2630@\315\314\314\314\314\214:@\232\231\231\231\231\031 @fffffF?@\t\371\240g\263j\037@\000\000\000\000\000\0000@\000\000\000\000\000 =@\000\000\000\000\000\000*@\000\000\000\000\000\0002@fffff\346\034@\000\000\000\000\000\000:@\000\000\000\000\000\000*@\036\026jM\363\016 @\000\000\000\000\000\300A@33333\0235@33333c?@fffff\346\034@\000\000\000\000\000pp@\243\222:\001M\204\037@\367\006_\230L\225\037@\361\364JY\206\270;@8\370\302d\252Pb@\000\000\000\000\000\000\037@\000\000\000\000\000\000%@\t\212\037c\356\212T@\000\000\000\000\000\000J@\t\371\240g\263\352\034@\232\231\231\231\231\031 @\000\000\000\000\000\0002@\353\3426\032\300{&@33333\363\"@\000\000\000\000\000\0005@\367\006_\230L\225\037@\356\353\3009#\312D@\243\222:\001M\204\037@\232\231\231\231\231\031 @\000\000\000\000\000\000/@\000\000\000\000\000\000\037@vq\033\r\340\2555@\315\314\314\314\314\3141@\000\000\000\000\000\330C@333333\037@\221\017z6\253.S@\000\000\000\000\000\000:@!\037\364lV\375N@\000\000\000\000\000\300A@\000\000\000\000\000\000%@\t\371\240g\263\352\034@\000\000\000\000\000\300;@33333sG@\t\371\240g\263\352\034@\000\000\000\000\000\000T@fffff\336T@fffff\346;@\361\364JY\206\270;@\256\266b\177\331}.@\000\000\000\000\000\000%@\342\351\225\262\014Q @33333\263\037@33333S!@\000\000\000\000\000\000%@33333sG@\000\000\000\000\000`R@\270\257\003\347\214\350,@\254\255\330_v?L@\232\231\231\231\231\231\036@\367\006_\230L\225\037@\232\231\231\231\231\031 @\000\000\000\000\000\000=@33333\363(@\000\000\000\000\000\000\"@\000\000\000\000\000\000#@fffff&\037@\315\314\314\314\314\214G@\000\000\000\000\000\000%@33333\263/@\000\000\000\000\0000A@\232\231\231\231\231\031 @\000\000\000\000\000pp@\232\231\231\231\231\031 @\232\231\231\231\231\031 @\t\371\240g\263j\037@fffff\226N@33333\2234@\000\000\000\000\000\000\035@\232\231\231\231\231\031 @\210\205Z\323\274SA@\022\024?\306\334\255O@\000\000\000\000\000\0007@\000\000\000\000\000\000:@\367\006_\230L\225\037@\367\006_\230L\225\037@fffffRS@\036\026jM\363N!@33333\263\037@\367\006_\230L\225\037@\232\231\231\231\231\231\036@\232\231\231\231\231\031\037@\367\006_\230L\225\037@fffff&8@\000\000\000\000\000\000J@\270\257\003\347\214\350,@\232\231\231\231\231\031 @fffff\246#@{\203/L\246\352,@33333\263\037@\000\000\000\000\000\000\037@\000\000\000\000\000\0005@8\370\302d\252\360n@fffffF?@\000\000\000\000\000`R@\232\231\231\231\231\031 @\212\216\344\362\037\022>@\000\000\000\000\000\000*@fffffRS@\353\3426\032\300{&@\000\000\000\000\000\000\037@p_\007\316\031\221\034@$(~\214\271[6@fffff\346\033@\367\006_\230L\225\037@333333\034@\000\000\000\000\000\000-@\000\000\000\000\000\000:@\000\000\000\000\000\000*@HP\374\030s\027.@\361\364JY\206H:@\315\314\314\314\314\214J@\036\026jM\363n\"@\315\314\314\314\314\314S@\256\266b\177\331}.@\000\000\000\000\000\000\037@33333\263/@\000\000\000\000\000\000\033@\000\000\000\000\000\000\'@\000\000\000\000\000`B@\220\240\3701\346.\037@\000\000\000\000\0000A@\000\000\000\000\000\000:@\000\000\000\000\000\000*@\315\314\314\314\314\014)@fffff\246P@\232\231\231\231\231\031 @\000\000\000\000\000\000-@\000\000\000\000\000@\035@TR\'\240\211\260N@\220\240\3701\346\356\036@\232\231\231\231\231\031 @33333S!@33333cQ@\232\231\231\231\231\0310@\000\000\000\000\000\200/@\232\231\231\231\231\031\037@33333S!@\000\000\000\000\000\330C@fffff\2064@\000\000\000\000\000\200K@fffff\346;@\315\314\314\314\314\3549@\254\255\330_v?L@\000\000\000\000\000\300@@\000\000\000\000\000 =@\025\035\311\345?D&@33333\263\037@\212\216\344\362\037\262>@\t\371\240g\263j\037@\017\013\265\246yw9@fffff\266<@\000\000\000\000\000\000*@\000\000\000\000\000\000\000\00033333cQ@\232\231\231\231\231\031.@33333c?@\000\000\000\000\000\200C@fffff\0066@\000\000\000\000\000\000I@\000\000\000\000\000\000/@\315\314\314\314\314\214:@\000\000\000\000\000\000/@\367\006_\230L\225\037@\000\000\000\000\000\000*@\000\000\000\000\000\000*@\t\371\240g\263j\037@\000\000\000\000\000\000:@\361\364JY\206\270;@8\370\302d\252Pb@\000\000\000\000\000\000\037@\036\026jM\363\316 @\000\000\000\000\000\000\037@\000\000\000\000\000\000*@\000\000\000\000\000\000#@33333cQ@]m\305\376\262\373\031@fffff\346\034@\232\231\231\231\231\031 @\315\314\314\314\314\354$@33333\263/@\232\231\231\231\231\3112@\000\000\000\000\000\000\037@\000\000\000\000\000\000?@333333\034@\000\000\000\000\000\0005@\000\000\000\000\000\000\035@\000\000\000\000\000\000*@\000\000\000\000\000\000\037@\232\231\231\231\231Q\\@33333\263\037@\000\000\000\000\000\000;@\221\017z6\253\022S@\000\000\000\000\000\000%@\232\231\231\231\231\031 @\000\000\000\000\000\000*@\232\231\231\231\231\031 @\367\006_\230L\225\037@\000\000\000\000\000\200V@33333\263\"@\000\000\000\000\000\000%@\000\000\000\000\000\000\035@\000\000\000\000\000\000*@\017\013\265\246yw9@fffff\336T@\232\231\231\231\231\031\037@\000\000\000\000\000\000+@33333c?@\000\000\000\000\000\000%@333333\036@\000\000\000\000\000\000:@\000\000\000\000\000@:@\000\000\000\000\000\000%@\315\314\314\314\314\214(@\270\257\003\347\214\350,@\000\000\000\000\000\000/@\000\000\000\000\000\000%@\000\000\000\000\000\200\034@fffff\346\034@\000\000\000\000\000\200V@\232\231\231\231\231\031\037@\000\000\000\000\000\000-@\273\270\215\006\360FJ@\000\000\000\000\000\000:@\000\000\000\000\000\000\035@\315\314\314\314\314\354$@\315\314\314\314\314\214:@\232\231\231\231\231\0310@fffff64@\256\266b\177\331}.@\315\314\314\314\314\314S@\000\000\000\000\000\240U@\277\016\2343\242\002\200@\000\000\000\000\000\000:@\000\000\000\000\000\000\037@33333c?@\232\231\231\231\231\351S@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037@\000\000\000\000\000\000%@\000\000\000\000\000\330C@\232\231\231\231\231\031\037@\315\314\314\314\314.c@\321\221\\\376C\364`@\000\000\000\000\000\000?@\000\000\000\000\000\000\000\000\000\000\000\000\000\2003@33333\263=@\000\000\000\000\000\000\037@o\360\205\311T}S@\000\000\000\000\000\000\037@\000\000\000\000\000\000\000\000\000\000\000\000\000 =@\000\000\000\000\000@4@\000\000\000\000\000\000\037@\t\371\240g\263j\037@\000\000\000\000\000\000#@\232\231\231\231\231\031 @\000\000\000\000\000\000:@33333S!@\000\000\000\000\000\000#@\367\006_\230L\225\037@\000\000\000\000\000\000*@\000\000\000\000\000\000\037@fffff\266S@\367u\340\234\021\305V@\000\000\000\000\000\300)@33333\263!@\367\006_\230L\225\037@\361\364JY\206\270;@\t\371\240g\263\352\034@\232\231\231\231\231\361b@\000\000\000\000\000\200>@8\370\302d\252\360n@\000\000\000\000\000\000\037@\000\000\000\000\000@7@\000\000\000\000\000\000\000\00033333\263(@\232\231\231\231\231\031 @\232\231\231\231\231\361b@\243#\271\374\207\270[@\232\231\231\231\2319[@\000\000\000\000\000\0008@\273\270\215\006\360vL@<\275R\226!\312T@\000\000\000\000\000fp@\000\000\000\000\000\000:@\367\006_\230L\225\037@\000\000\000\000\000@:@\t\371\240g\263j\037@\000\000\000\000\000\000:@\000\000\000\000\000\000,@/n\243\001\274\233d@\000\000\000\000\000\320`@\000\000\000\000\000\000\035@\367\006_\230L\225\037@33333\263(@\000\000\000\000\000\000=@33333cQ@\321\221\\\376C\364`@33333\363\030@\000\000\000\000\000\000*@fffff\2064@!\037\364lV\375L@\000\000\000\000\000@7@\000\000\000\000\000\200<@\315\314\314\314\314.c@\000\000\000\000\000\0002@\315\314\314\314\314\264`@\367\006_\230L\225\037@fffff\246P@\000\000\000\000\000\320`@\232\231\231\231\231\031 @\000\000\000\000\000\300A@\000\000\000\000\000\000:@\000\000\000\000\000pp@\000\000\000\000\000\000*@\000\000\000\000\000\000*@\000\000\000\000\000\000*@\000\000\000\000\000\000*@\000\000\000\000\000\000*@\232\231\231\231\231\0310@\315\314\314\314\314\314/@33333S!@33333s\"@\000\000\000\000\000\200A@\t\371\240g\263\352\034@\315\314\314\314\314\3141@fffff\346\034@\000\000\000\000\000\000#@\000\000\000\000\000\200K@\000\000\000\000\000\000*@\243\222:\001M\204\037@\243\222:\001M\204\037@fffff\346;@\361\364JY\206\270;@\270\257\003\347\214\350,@333333\034@\000\000\000\000\000\000/@\000\000\000\000\000\000\035@\000\000\000\000\000\320R@\t\371\240g\263\352\034@\000\000\000\000\000\000\037@33333SQ@TR\'\240\211\270K@]m\305\376\262\373\031@\232\231\231\231\231\031 @\321\221\\\376C\364`@33333\0235@\t\212\037c\356\212T@\000\000\000\000\000\000\035@\000\000\000\000\000pj@\315\314\314\314\314\014\020@\232\231\231\231\231\031\037@\315\314\314\314\314pl@\353\3426\032\300{/@33333\263\037@\000\000\000\000\000\000J@\367\006_\230L\225\037@\000\000\000\000\000`R@33333sG@\000\000\000\000\000\000*@\t\371\240g\263\352\036@\000\000\000\000\000\000(@\000\000\000\000\000\000^@\220\240\3701\346.\037@33333\263\037@\232\231\231\231\231Q\\@33333\2630@\220\240\3701\346.\037@\t\371\240g\263j\037@\000\000\000\000\000\000:@\000\000\000\000\000\000%@\315\314\314\314\314L)@33333\263\037@\232\231\231\231\231\031 @fffff\246#@33333\263/@33333S!@\000\000\000\000\000\0005@\000\000\000\000\000\000\037@\000\000\000\000\000\3002@\232\231\231\231\231\031\037@\017\013\265\246yw9@\367\006_\230L\225\037@\220\240\3701\346n\033@\000\000\000\000\000\200V@\000\000\000\000\000\000\000\00033333\263\037@\232\231\231\231\231\031 @\000\000\000\000\000@@@\000\000\000\000\000\000*@\000\000\000\000\000\000*@fffff&8@\367\006_\230L\225\037@\220\240\3701\346\356\036@\000\000\000\000\000\200\037@\315\314\314\314\314\314,@fffff64@\000\000\000\000\000\000\035@\000\000\000\000\000\000:@\000\000\000\000\000\000:@\000\000\000\000\000\000\037@\232\231\231\231\231\031 @\315\314\314\314\314\214:@\232\231\231\231\231\0310@\000\000\000\000\000\000:@\000\000\000\000\000\200\034@33333\363K@\000\000\000\000\000\000^@\000\000\000\000\0000A@\000\000\000\000\000\3002@\000\000\000\000\000pp@\000\000\000\000\000\000%@\000\000\000\000\000@:@\000\000\000\000\000\000#@\232\231\231\231\231\031\037@\000\000\000\000\000\000*@\232\231\231\231\2319 @\t\212\037c\356vT@\000\000\000\000\000\2003@\315\314\314\314\314\214:@\212\216\344\362\037B3@\000\000\000\000\000\200>@\000\000\000\000\000\300;@\017\013\265\246y\3673@\000\000\000\000\000\300;@\221\017z6\253FV@\232\231\231\231\231\031 @\367\006_\230L\225\037@\315\314\314\314\314\214:@fffff\356I@\000\000\000\000\000\000%@\000\000\000\000\000\000\037@\315\314\314\314\314\214:@\232\231\231\231\231\031 @\000\000\000\000\000@C@\000\000\000\000\000\000*@\232\231\231\231\231\031 @333333\034@\000\000\000\000\000\000\000\000\315\314\314\314\314\214:@fffff\346\036@\212\216\344\362\037B3@\000\000\000\000\000\000\035@33333S!@\000\000\000\000\000\300;@\205|\320\263Y\225+@\315\314\314\314\314\254#@\000\000\000\000\000\000J@\000\000\000\000\000\0005@\220\240\3701\346.\034@\367\006_\230L\025\036@33333\223(@33333sG@\000\000\000\000\000\000\000\000\232\231\231\231\231\031 @\315\314\314\314\314,#@\367u\340\234\021\305V@\017\013\265\246yw9@\000\000\000\000\000\200V@33333\263=@\232\231\231\231\231\031 @\315\314\314\314\314\314/@\017\013\265\246y\3673@\000\000\000\000\000\000\035@\000\000\000\000\000\200>@TR\'\240\211\300H@\232\231\231\231\231\031 @{\203/L\246\352,@\367u\340\234\021\221S@333333.@\232\231\231\231\231\361b@\220\240\3701\346.\037@33333S!@\000\000\000\000\000\000\037@\243\222:\001M\204\036@\315\314\314\314\314,#@\000\000\000\000\000\240U@\232\231\231\231\2319[@\000\000\000\000\000\000:@\315\314\314\314\314\214:@fffff\2066@\254\255\330_v?L@\000\000\000\000\000\000\037@\232\231\231\231\231\031 @\232\231\231\231\231I:@33333\263M@]m\305\376\262\373\035@\337\340\013\223\251\002A@\000\000\000\000\000\000%@fffff&8@\000\000\000\000\000\000:@\367\006_\230L\225\037@\000\000\000\000\000`W@\367\006_\230L\225\037@fffff\346\034@!\037\364lV\375L@\t\371\240g\263\352\034@\000\000\000\000\000\000\037@\000\000\000\000\000\000%@b\241\3264\357\270k@33333\263\037@\000\000\000\000\000\000\'@\000\000\000\000\000\000:@\t\371\240g\263\352\034@\t\371\240g\263\352\034@$(~\214\271[6@33333S!@\000\000\000\000\000@:@\315\314\314\314\314\214:@33333\233Z@\000\000\000\000\000\000-@\000\000\000\000\000\300H@\000\000\000\000\000\300Q@fffffF?@fffffF?@\000\000\000\000\000\000:@33333\233Z@\000\000\000\000\000\000:@\000\000\000\000\000\000:@\232\231\231\231\231\271+@fffff\2064@\000\000\000\000\000`B@\243#\271\374\207\270[@\000\000\000\000\000\000:@p_\007\316\031Q\037@fffff\346\034@\232\231\231\231\231\031\037@\315\314\314\314\314\214:@\315\314\314\314\314\314C@\315\314\314\314\314pl@\232\231\231\231\231\351S@ffffff1@\000\000\000\000\000\000\037@\367\006_\230L\225\037@\000\000\000\000\000\000+@\232\231\231\231\231\031 @\232\231\231\231\231\031 @fffff&8@\367\006_\230L\225\037@33333\0235@\t\371\240g\263\352\034@\t\371\240g\263j\037@\000\000\000\000\000\000%@!\037\364lV\275I@33333c:@\000\000\000\000\000\000\037@\232\231\231\231\231\031 @\000\000\000\000\000\000-@\000\000\000\000\000\000*@33333\363K@{\203/L\246\352,@33333\263\037@\000\000\000\000\000\000>@\243#\271\374\207\270[@\000\000\000\000\000\000:@\000\000\000\000\000\020D@\315\314\314\314\314l!@\232\231\231\231\231\351S@\000\000\000\000\000\000.@\315\314\314\314\314\314S@\232\231\231\231\231\031 @\232\231\231\231\231\031 @\000\000\000\000\000\200\034@\367u\340\234\021\221S@\000\000\000\000\000\000\035@\000\000\000\000\000\000\037@\000\000\000\000\000\000:@fffff&8@\000\000\000\000\000\200@@\000\000\000\000\000\000\000\000fffff\346\034@\273\270\215\006\360vL@\000\000\000\000\000\000;@\367\006_\230L\225\037@333333E@\232\231\231\231\231\031 @\315\314\314\314\314\214:@\232\231\231\231\231\031/@\367\006_\230L\225\037@\000\000\000\000\000\200>@\356\353\3009#\312D@\315\314\314\314\314.c@fffffF?@333333\034@\000\000\000\000\000\000/@\000\000\000\000\000\000\037@\232\231\231\231\231\031 @\000\000\000\000\000@P@\315\314\314\314\314\314,@\232\231\231\231\231\0310@\000\000\000\000\000\200C@\000\000\000\000\000\000%@\270\257\003\347\214\350,@\273\270\215\006\360FJ@\353\3426\032\300{/@\t\371\240g\263j\037@\232\231\231\231\231\0310@EGr\371\017)@@33333\263(@o\360\205\311T}S@\367\006_\230L\225\037@\220\240\3701\346\356\036@\000\000\000\000\000\000>@\326\305m4\2007\034@\000\000\000\000\000\200>@\000\000\000\000\000\000\000\000fffff\346;@\000\000\000\000\000\000*@33333\263\037@\000\000\000\000\000@:@\000\000\000\000\000\330C@\232\231\231\231\231\0310@\t\371\240g\263j\037@33333SQ@fffff\346;@\254\255\330_v?L@\212\216\344\362\037B3@\221\017z6\253.S@\367\006_\230L\225\037@\000\000\000\000\000\300A@333333\036@333333\036@\367\006_\230L\225\037@\000\000\000\000\000\0007@\256\266b\177\331\335 @p_\007\316\031Q\037@\000\000\000\000\000\000\033@\000\000\000\000\000`R@"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 655
          }
        }
        string_val: "Cumings, Mrs. John Bradley (Florence Briggs Thayer)"
        string_val: "Heikkinen, Miss. Laina"
        string_val: "Futrelle, Mrs. Jacques Heath (Lily May Peel)"
        string_val: "Allen, Mr. William Henry"
        string_val: "Moran, Mr. James"
        string_val: "McCarthy, Mr. Timothy J"
        string_val: "Palsson, Master. Gosta Leonard"
        string_val: "Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)"
        string_val: "Nasser, Mrs. Nicholas (Adele Achem)"
        string_val: "Sandstrom, Miss. Marguerite Rut"
        string_val: "Bonnell, Miss. Elizabeth"
        string_val: "Saundercock, Mr. William Henry"
        string_val: "Andersson, Mr. Anders Johan"
        string_val: "Vestrom, Miss. Hulda Amanda Adolfina"
        string_val: "Hewlett, Mrs. (Mary D Kingcome) "
        string_val: "Rice, Master. Eugene"
        string_val: "Williams, Mr. Charles Eugene"
        string_val: "Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)"
        string_val: "Masselmani, Mrs. Fatima"
        string_val: "Fynney, Mr. Joseph J"
        string_val: "Beesley, Mr. Lawrence"
        string_val: "McGowan, Miss. Anna \"Annie\""
        string_val: "Sloper, Mr. William Thompson"
        string_val: "Palsson, Miss. Torborg Danira"
        string_val: "Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)"
        string_val: "Emir, Mr. Farred Chehab"
        string_val: "Fortune, Mr. Charles Alexander"
        string_val: "O\'Dwyer, Miss. Ellen \"Nellie\""
        string_val: "Todoroff, Mr. Lalio"
        string_val: "Uruchurtu, Don. Manuel E"
        string_val: "Spencer, Mrs. William Augustus (Marie Eugenie)"
        string_val: "Glynn, Miss. Mary Agatha"
        string_val: "Wheadon, Mr. Edward H"
        string_val: "Meyer, Mr. Edgar Joseph"
        string_val: "Holverson, Mr. Alexander Oskar"
        string_val: "Mamee, Mr. Hanna"
        string_val: "Cann, Mr. Ernest Charles"
        string_val: "Vander Planke, Miss. Augusta Maria"
        string_val: "Nicola-Yarred, Miss. Jamila"
        string_val: "Ahlin, Mrs. Johan (Johanna Persdotter Larsson)"
        string_val: "Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)"
        string_val: "Kraeff, Mr. Theodor"
        string_val: "Laroche, Miss. Simonne Marie Anne Andree"
        string_val: "Devaney, Miss. Margaret Delia"
        string_val: "Rogers, Mr. William John"
        string_val: "Lennon, Mr. Denis"
        string_val: "O\'Driscoll, Miss. Bridget"
        string_val: "Samaan, Mr. Youssef"
        string_val: "Arnold-Franchi, Mrs. Josef (Josefine Franchi)"
        string_val: "Panula, Master. Juha Niilo"
        string_val: "Nosworthy, Mr. Richard Cater"
        string_val: "Harper, Mrs. Henry Sleeper (Myna Haxtun)"
        string_val: "Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)"
        string_val: "Ostby, Mr. Engelhart Cornelius"
        string_val: "Woolner, Mr. Hugh"
        string_val: "Rugg, Miss. Emily"
        string_val: "Novel, Mr. Mansouer"
        string_val: "West, Miss. Constance Mirium"
        string_val: "Goodwin, Master. William Frederick"
        string_val: "Sirayanian, Mr. Orsen"
        string_val: "Icard, Miss. Amelie"
        string_val: "Harris, Mr. Henry Birkhardt"
        string_val: "Skoog, Master. Harald"
        string_val: "Stewart, Mr. Albert A"
        string_val: "Moubarek, Master. Gerios"
        string_val: "Nye, Mrs. (Elizabeth Ramell)"
        string_val: "Crease, Mr. Ernest James"
        string_val: "Andersson, Miss. Erna Alexandra"
        string_val: "Kink, Mr. Vincenz"
        string_val: "Jenkin, Mr. Stephen Curnow"
        string_val: "Goodwin, Miss. Lillian Amy"
        string_val: "Hood, Mr. Ambrose Jr"
        string_val: "Chronopoulos, Mr. Apostolos"
        string_val: "Bing, Mr. Lee"
        string_val: "Moen, Mr. Sigurd Hansen"
        string_val: "Staneff, Mr. Ivan"
        string_val: "Moutal, Mr. Rahamin Haim"
        string_val: "Caldwell, Master. Alden Gates"
        string_val: "Dowdell, Miss. Elizabeth"
        string_val: "Waelens, Mr. Achille"
        string_val: "Sheerlinck, Mr. Jan Baptist"
        string_val: "McDermott, Miss. Brigdet Delia"
        string_val: "Carrau, Mr. Francisco M"
        string_val: "Ilett, Miss. Bertha"
        string_val: "Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)"
        string_val: "Ford, Mr. William Neal"
        string_val: "Slocovski, Mr. Selman Francis"
        string_val: "Fortune, Miss. Mabel Helen"
        string_val: "Celotti, Mr. Francesco"
        string_val: "Christmann, Mr. Emil"
        string_val: "Andreasson, Mr. Paul Edvin"
        string_val: "Chaffee, Mr. Herbert Fuller"
        string_val: "Dean, Mr. Bertram Frank"
        string_val: "Coxon, Mr. Daniel"
        string_val: "Shorney, Mr. Charles Joseph"
        string_val: "Goldschmidt, Mr. George B"
        string_val: "Greenfield, Mr. William Bertram"
        string_val: "Doling, Mrs. John T (Ada Julia Bone)"
        string_val: "Kantor, Mr. Sinai"
        string_val: "Petranec, Miss. Matilda"
        string_val: "Petroff, Mr. Pastcho (\"Pentcho\")"
        string_val: "White, Mr. Richard Frasar"
        string_val: "Johansson, Mr. Gustaf Joel"
        string_val: "Gustafsson, Mr. Anders Vilhelm"
        string_val: "Mionoff, Mr. Stoytcho"
        string_val: "Salkjelsvik, Miss. Anna Kristine"
        string_val: "Moss, Mr. Albert Johan"
        string_val: "Rekic, Mr. Tido"
        string_val: "Moran, Miss. Bertha"
        string_val: "Porter, Mr. Walter Chamberlain"
        string_val: "Zabour, Miss. Hileni"
        string_val: "Barton, Mr. David John"
        string_val: "Jussila, Miss. Katriina"
        string_val: "Attalah, Miss. Malake"
        string_val: "Pekoniemi, Mr. Edvard"
        string_val: "Connors, Mr. Patrick"
        string_val: "Turpin, Mr. William John Robert"
        string_val: "Baxter, Mr. Quigg Edmond"
        string_val: "Andersson, Miss. Ellis Anna Maria"
        string_val: "Hickman, Mr. Stanley George"
        string_val: "Moore, Mr. Leonard Charles"
        string_val: "Nasser, Mr. Nicholas"
        string_val: "Webber, Miss. Susan"
        string_val: "White, Mr. Percival Wayland"
        string_val: "Nicola-Yarred, Master. Elias"
        string_val: "McMahon, Mr. Martin"
        string_val: "Madsen, Mr. Fridtjof Arne"
        string_val: "Peter, Miss. Anna"
        string_val: "Ekstrom, Mr. Johan"
        string_val: "Drazenoic, Mr. Jozef"
        string_val: "Coelho, Mr. Domingos Fernandeo"
        string_val: "Robins, Mrs. Alexander A (Grace Charity Laury)"
        string_val: "Weisz, Mrs. Leopold (Mathilde Francoise Pede)"
        string_val: "Sobey, Mr. Samuel James Hayden"
        string_val: "Richard, Mr. Emile"
        string_val: "Newsom, Miss. Helen Monypeny"
        string_val: "Futrelle, Mr. Jacques Heath"
        string_val: "Osen, Mr. Olaf Elon"
        string_val: "Giglio, Mr. Victor"
        string_val: "Boulos, Mrs. Joseph (Sultana)"
        string_val: "Nysten, Miss. Anna Sofia"
        string_val: "Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)"
        string_val: "Burke, Mr. Jeremiah"
        string_val: "Andrew, Mr. Edgardo Samuel"
        string_val: "Nicholls, Mr. Joseph Charles"
        string_val: "Andersson, Mr. August Edvard (\"Wennerstrom\")"
        string_val: "Ford, Miss. Robina Maggie \"Ruby\""
        string_val: "Navratil, Mr. Michel (\"Louis M Hoffman\")"
        string_val: "Byles, Rev. Thomas Roussel Davids"
        string_val: "Bateman, Rev. Robert James"
        string_val: "Pears, Mrs. Thomas (Edith Wearne)"
        string_val: "Meo, Mr. Alfonzo"
        string_val: "van Billiard, Mr. Austin Blyler"
        string_val: "Olsen, Mr. Ole Martin"
        string_val: "Williams, Mr. Charles Duane"
        string_val: "Gilnagh, Miss. Katherine \"Katie\""
        string_val: "Corn, Mr. Harry"
        string_val: "Smiljanic, Mr. Mile"
        string_val: "Sage, Master. Thomas Henry"
        string_val: "Cribb, Mr. John Hatfield"
        string_val: "Watt, Mrs. James (Elizabeth \"Bessie\" Inglis Milne)"
        string_val: "Bengtsson, Mr. John Viktor"
        string_val: "Calic, Mr. Jovo"
        string_val: "Panula, Master. Eino Viljami"
        string_val: "Goldsmith, Master. Frank John William \"Frankie\""
        string_val: "Chibnall, Mrs. (Edith Martha Bowerman)"
        string_val: "Skoog, Mrs. William (Anna Bernhardina Karlsson)"
        string_val: "Baumann, Mr. John D"
        string_val: "Ling, Mr. Lee"
        string_val: "Van der hoef, Mr. Wyckoff"
        string_val: "Rice, Master. Arthur"
        string_val: "Johnson, Miss. Eleanor Ileen"
        string_val: "Sivola, Mr. Antti Wilhelm"
        string_val: "Smith, Mr. James Clinch"
        string_val: "Klasen, Mr. Klas Albin"
        string_val: "Lefebre, Master. Henry Forbes"
        string_val: "Isham, Miss. Ann Elizabeth"
        string_val: "Hale, Mr. Reginald"
        string_val: "Leonard, Mr. Lionel"
        string_val: "Sage, Miss. Constance Gladys"
        string_val: "Pernot, Mr. Rene"
        string_val: "Asplund, Master. Clarence Gustaf Hugo"
        string_val: "Becker, Master. Richard F"
        string_val: "Kink-Heilmann, Miss. Luise Gretchen"
        string_val: "Rood, Mr. Hugh Roscoe"
        string_val: "O\'Brien, Mrs. Thomas (Johanna \"Hannah\" Godfrey)"
        string_val: "Romaine, Mr. Charles Hallace (\"Mr C Rolmane\")"
        string_val: "Bourke, Mr. John"
        string_val: "Turcin, Mr. Stjepan"
        string_val: "Pinsky, Mrs. (Rosa)"
        string_val: "Carbines, Mr. William"
        string_val: "Andersen-Jensen, Miss. Carla Christine Nielsine"
        string_val: "Navratil, Master. Michel M"
        string_val: "Brown, Mrs. James Joseph (Margaret Tobin)"
        string_val: "Lurette, Miss. Elise"
        string_val: "Mernagh, Mr. Robert"
        string_val: "Olsen, Mr. Karl Siegwart Andreas"
        string_val: "Madigan, Miss. Margaret \"Maggie\""
        string_val: "Yrois, Miss. Henriette (\"Mrs Harbeck\")"
        string_val: "Vande Walle, Mr. Nestor Cyriel"
        string_val: "Sage, Mr. Frederick"
        string_val: "Johanson, Mr. Jakob Alfred"
        string_val: "Youseff, Mr. Gerious"
        string_val: "Cohen, Mr. Gurshon \"Gus\""
        string_val: "Strom, Miss. Telma Matilda"
        string_val: "Backstrom, Mr. Karl Alfred"
        string_val: "Albimona, Mr. Nassef Cassem"
        string_val: "Carr, Miss. Helen \"Ellen\""
        string_val: "Blank, Mr. Henry"
        string_val: "Ali, Mr. Ahmed"
        string_val: "Cameron, Miss. Clear Annie"
        string_val: "Perkin, Mr. John Henry"
        string_val: "Givard, Mr. Hans Kristensen"
        string_val: "Kiernan, Mr. Philip"
        string_val: "Newell, Miss. Madeleine"
        string_val: "Honkanen, Miss. Eliina"
        string_val: "Jacobsohn, Mr. Sidney Samuel"
        string_val: "Bazzani, Miss. Albina"
        string_val: "Harris, Mr. Walter"
        string_val: "Sunderland, Mr. Victor Francis"
        string_val: "Bracken, Mr. James H"
        string_val: "Green, Mr. George Henry"
        string_val: "Nenkoff, Mr. Christo"
        string_val: "Hoyt, Mr. Frederick Maxfield"
        string_val: "Berglund, Mr. Karl Ivar Sven"
        string_val: "Mellors, Mr. William John"
        string_val: "Lovell, Mr. John Hall (\"Henry\")"
        string_val: "Fahlstrom, Mr. Arne Jonas"
        string_val: "Lefebre, Miss. Mathilde"
        string_val: "Harris, Mrs. Henry Birkhardt (Irene Wallach)"
        string_val: "Larsson, Mr. Bengt Edvin"
        string_val: "Sjostedt, Mr. Ernst Adolf"
        string_val: "Asplund, Miss. Lillian Gertrud"
        string_val: "Leyson, Mr. Robert William Norman"
        string_val: "Harknett, Miss. Alice Phoebe"
        string_val: "Hold, Mr. Stephen"
        string_val: "Collyer, Miss. Marjorie \"Lottie\""
        string_val: "Pengelly, Mr. Frederick William"
        string_val: "Hunt, Mr. George Henry"
        string_val: "Zabour, Miss. Thamine"
        string_val: "Murphy, Miss. Katherine \"Kate\""
        string_val: "Coleridge, Mr. Reginald Charles"
        string_val: "Maenpaa, Mr. Matti Alexanteri"
        string_val: "Attalah, Mr. Sleiman"
        string_val: "Minahan, Dr. William Edward"
        string_val: "Lindahl, Miss. Agda Thorilda Viktoria"
        string_val: "Hamalainen, Mrs. William (Anna)"
        string_val: "Beckwith, Mr. Richard Leonard"
        string_val: "Carter, Rev. Ernest Courtenay"
        string_val: "Reed, Mr. James George"
        string_val: "Strom, Mrs. Wilhelm (Elna Matilda Persson)"
        string_val: "Stead, Mr. William Thomas"
        string_val: "Lobb, Mr. William Arthur"
        string_val: "Rosblom, Mrs. Viktor (Helena Wilhelmina)"
        string_val: "Touma, Mrs. Darwis (Hanne Youssef Razi)"
        string_val: "Thorne, Mrs. Gertrude Maybelle"
        string_val: "Cherry, Miss. Gladys"
        string_val: "Ward, Miss. Anna"
        string_val: "Parrish, Mrs. (Lutie Davis)"
        string_val: "Smith, Mr. Thomas"
        string_val: "Asplund, Master. Edvin Rojj Felix"
        string_val: "Taussig, Mr. Emil"
        string_val: "Harrison, Mr. William"
        string_val: "Henry, Miss. Delia"
        string_val: "Reeves, Mr. David"
        string_val: "Panula, Mr. Ernesti Arvid"
        string_val: "Persson, Mr. Ernst Ulrik"
        string_val: "Graham, Mrs. William Thompson (Edith Junkins)"
        string_val: "Bissette, Miss. Amelia"
        string_val: "Cairns, Mr. Alexander"
        string_val: "Tornquist, Mr. William Henry"
        string_val: "Mellinger, Mrs. (Elizabeth Anne Maidment)"
        string_val: "Natsch, Mr. Charles H"
        string_val: "Healy, Miss. Hanora \"Nora\""
        string_val: "Andrews, Miss. Kornelia Theodosia"
        string_val: "Lindblom, Miss. Augusta Charlotta"
        string_val: "Parkes, Mr. Francis \"Frank\""
        string_val: "Rice, Master. Eric"
        string_val: "Abbott, Mrs. Stanton (Rosa Hunt)"
        string_val: "Duane, Mr. Frank"
        string_val: "Olsson, Mr. Nils Johan Goransson"
        string_val: "de Pelsmaeker, Mr. Alfons"
        string_val: "Dorking, Mr. Edward Arthur"
        string_val: "Smith, Mr. Richard William"
        string_val: "Stankovic, Mr. Ivan"
        string_val: "de Mulder, Mr. Theodore"
        string_val: "Naidenoff, Mr. Penko"
        string_val: "Hosono, Mr. Masabumi"
        string_val: "Connolly, Miss. Kate"
        string_val: "Barber, Miss. Ellen \"Nellie\""
        string_val: "Bishop, Mrs. Dickinson H (Helen Walton)"
        string_val: "Levy, Mr. Rene Jacques"
        string_val: "Haas, Miss. Aloisia"
        string_val: "Mineff, Mr. Ivan"
        string_val: "Lewy, Mr. Ervin G"
        string_val: "Hanna, Mr. Mansour"
        string_val: "Allison, Miss. Helen Loraine"
        string_val: "Saalfeld, Mr. Adolphe"
        string_val: "Baxter, Mrs. James (Helene DeLaudeniere Chaput)"
        string_val: "Kelly, Miss. Anna Katherine \"Annie Kate\""
        string_val: "McCoy, Mr. Bernard"
        string_val: "Johnson, Mr. William Cahoone Jr"
        string_val: "Keane, Miss. Nora A"
        string_val: "Williams, Mr. Howard Hugh \"Harry\""
        string_val: "Allison, Master. Hudson Trevor"
        string_val: "Fleming, Miss. Margaret"
        string_val: "Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)"
        string_val: "Abelson, Mr. Samuel"
        string_val: "Francatelli, Miss. Laura Mabel"
        string_val: "Hays, Miss. Margaret Bechstein"
        string_val: "Ryerson, Miss. Emily Borie"
        string_val: "Lahtinen, Mrs. William (Anna Sylfven)"
        string_val: "Hendekovic, Mr. Ignjac"
        string_val: "Hart, Mr. Benjamin"
        string_val: "Nilsson, Miss. Helmina Josefina"
        string_val: "Kantor, Mrs. Sinai (Miriam Sternin)"
        string_val: "Moraweck, Dr. Ernest"
        string_val: "Wick, Miss. Mary Natalie"
        string_val: "Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)"
        string_val: "Dennis, Mr. Samuel"
        string_val: "Danoff, Mr. Yoto"
        string_val: "Slayter, Miss. Hilda Mary"
        string_val: "Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)"
        string_val: "Sage, Mr. George John Jr"
        string_val: "Young, Miss. Marie Grice"
        string_val: "Nysveen, Mr. Johan Hansen"
        string_val: "Ball, Mrs. (Ada E Hall)"
        string_val: "Goldsmith, Mrs. Frank John (Emily Alice Brown)"
        string_val: "Hippach, Miss. Jean Gertrude"
        string_val: "McCoy, Miss. Agnes"
        string_val: "Partner, Mr. Austen"
        string_val: "Graham, Mr. George Edward"
        string_val: "Vander Planke, Mr. Leo Edmondus"
        string_val: "Frauenthal, Mrs. Henry William (Clara Heinsheimer)"
        string_val: "Denkoff, Mr. Mitto"
        string_val: "Pears, Mr. Thomas Clinton"
        string_val: "Burns, Miss. Elizabeth Margaret"
        string_val: "Dahl, Mr. Karl Edwart"
        string_val: "Blackwell, Mr. Stephen Weart"
        string_val: "Navratil, Master. Edmond Roger"
        string_val: "Fortune, Miss. Alice Elizabeth"
        string_val: "Collander, Mr. Erik Gustaf"
        string_val: "Sedgwick, Mr. Charles Frederick Waddington"
        string_val: "Fox, Mr. Stanley Hubert"
        string_val: "Brown, Miss. Amelia \"Mildred\""
        string_val: "Smith, Miss. Marion Elsie"
        string_val: "Davison, Mrs. Thomas Henry (Mary E Finck)"
        string_val: "Coutts, Master. William Loch \"William\""
        string_val: "Dimic, Mr. Jovan"
        string_val: "Odahl, Mr. Nils Martin"
        string_val: "Williams-Lambert, Mr. Fletcher Fellows"
        string_val: "Elias, Mr. Tannous"
        string_val: "Arnold-Franchi, Mr. Josef"
        string_val: "Yousif, Mr. Wazli"
        string_val: "Vanden Steen, Mr. Leo Peter"
        string_val: "Bowerman, Miss. Elsie Edith"
        string_val: "Funk, Miss. Annie Clemmer"
        string_val: "McGovern, Miss. Mary"
        string_val: "Mockler, Miss. Helen Mary \"Ellie\""
        string_val: "Skoog, Mr. Wilhelm"
        string_val: "del Carlo, Mr. Sebastiano"
        string_val: "Barbara, Mrs. (Catherine David)"
        string_val: "Asim, Mr. Adola"
        string_val: "O\'Brien, Mr. Thomas"
        string_val: "Adahl, Mr. Mauritz Nils Martin"
        string_val: "Warren, Mrs. Frank Manley (Anna Sophia Atkinson)"
        string_val: "Moussa, Mrs. (Mantoura Boulos)"
        string_val: "Jermyn, Miss. Annie"
        string_val: "Aubart, Mme. Leontine Pauline"
        string_val: "Harder, Mr. George Achilles"
        string_val: "Wiklund, Mr. Jakob Alfred"
        string_val: "Beavan, Mr. William Thomas"
        string_val: "Ringhini, Mr. Sante"
        string_val: "Palsson, Miss. Stina Viola"
        string_val: "Meyer, Mrs. Edgar Joseph (Leila Saks)"
        string_val: "Landergren, Miss. Aurora Adelia"
        string_val: "Widener, Mr. Harry Elkins"
        string_val: "Betros, Mr. Tannous"
        string_val: "Gustafsson, Mr. Karl Gideon"
        string_val: "Bidois, Miss. Rosalie"
        string_val: "Nakid, Miss. Maria (\"Mary\")"
        string_val: "Tikkanen, Mr. Juho"
        string_val: "Holverson, Mrs. Alexander Oskar (Mary Aline Towner)"
        string_val: "Plotcharsky, Mr. Vasil"
        string_val: "Davies, Mr. Charles Henry"
        string_val: "Goodwin, Master. Sidney Leonard"
        string_val: "Buss, Miss. Kate"
        string_val: "Sadlier, Mr. Matthew"
        string_val: "Lehmann, Miss. Bertha"
        string_val: "Carter, Mr. William Ernest"
        string_val: "Jansson, Mr. Carl Olof"
        string_val: "Gustafsson, Mr. Johan Birger"
        string_val: "Newell, Miss. Marjorie"
        string_val: "Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)"
        string_val: "Johansson, Mr. Erik"
        string_val: "Olsson, Miss. Elina"
        string_val: "McKane, Mr. Peter David"
        string_val: "Pain, Dr. Alfred"
        string_val: "Trout, Mrs. William H (Jessie L)"
        string_val: "Niskanen, Mr. Juha"
        string_val: "Adams, Mr. John"
        string_val: "Jussila, Miss. Mari Aina"
        string_val: "Hakkarainen, Mr. Pekka Pietari"
        string_val: "Oreskovic, Miss. Marija"
        string_val: "Gale, Mr. Shadrach"
        string_val: "Widegren, Mr. Carl/Charles Peter"
        string_val: "Richards, Master. William Rowe"
        string_val: "Birkeland, Mr. Hans Martin Monsen"
        string_val: "Lefebre, Miss. Ida"
        string_val: "Sdycoff, Mr. Todor"
        string_val: "Hart, Mr. Henry"
        string_val: "Minahan, Miss. Daisy E"
        string_val: "Cunningham, Mr. Alfred Fleming"
        string_val: "Sundman, Mr. Johan Julian"
        string_val: "Meek, Mrs. Thomas (Annie Louise Rowley)"
        string_val: "Drew, Mrs. James Vivian (Lulu Thorne Christian)"
        string_val: "Silven, Miss. Lyyli Karoliina"
        string_val: "Matthews, Mr. William John"
        string_val: "Van Impe, Miss. Catharina"
        string_val: "Gheorgheff, Mr. Stanio"
        string_val: "Charters, Mr. David"
        string_val: "Zimmerman, Mr. Leo"
        string_val: "Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)"
        string_val: "Rosblom, Mr. Viktor Richard"
        string_val: "Wiseman, Mr. Phillippe"
        string_val: "Clarke, Mrs. Charles V (Ada Maria Winfield)"
        string_val: "Phillips, Miss. Kate Florence (\"Mrs Kate Louise Phillips Marshall\")"
        string_val: "Flynn, Mr. James"
        string_val: "Pickard, Mr. Berk (Berk Trembisky)"
        string_val: "Bjornstrom-Steffansson, Mr. Mauritz Hakan"
        string_val: "Thorneycroft, Mrs. Percival (Florence Kate White)"
        string_val: "Louch, Mrs. Charles Alexander (Alice Adelaide Slow)"
        string_val: "Kallio, Mr. Nikolai Erland"
        string_val: "Silvey, Mr. William Baird"
        string_val: "Carter, Miss. Lucile Polk"
        string_val: "Ford, Miss. Doolina Margaret \"Daisy\""
        string_val: "Richards, Mrs. Sidney (Emily Hocking)"
        string_val: "Fortune, Mr. Mark"
        string_val: "Kvillner, Mr. Johan Henrik Johannesson"
        string_val: "Hart, Mrs. Benjamin (Esther Ada Bloomfield)"
        string_val: "Hampe, Mr. Leon"
        string_val: "Petterson, Mr. Johan Emil"
        string_val: "Reynaldo, Ms. Encarnacion"
        string_val: "Johannesen-Bratthammer, Mr. Bernt"
        string_val: "Dodge, Master. Washington"
        string_val: "Mellinger, Miss. Madeleine Violet"
        string_val: "Seward, Mr. Frederic Kimber"
        string_val: "Baclini, Miss. Marie Catherine"
        string_val: "Peuchen, Major. Arthur Godfrey"
        string_val: "West, Mr. Edwy Arthur"
        string_val: "Hagland, Mr. Ingvald Olai Olsen"
        string_val: "Foreman, Mr. Benjamin Laventall"
        string_val: "Goldenberg, Mr. Samuel L"
        string_val: "Peduzzi, Mr. Joseph"
        string_val: "Jalsevac, Mr. Ivan"
        string_val: "Millet, Mr. Francis Davis"
        string_val: "Kenyon, Mrs. Frederick R (Marion)"
        string_val: "Toomey, Miss. Ellen"
        string_val: "O\'Connor, Mr. Maurice"
        string_val: "Anderson, Mr. Harry"
        string_val: "Morley, Mr. William"
        string_val: "Gee, Mr. Arthur H"
        string_val: "Milling, Mr. Jacob Christian"
        string_val: "Maisner, Mr. Simon"
        string_val: "Goncalves, Mr. Manuel Estanslas"
        string_val: "Campbell, Mr. William"
        string_val: "Smart, Mr. John Montgomery"
        string_val: "Scanlan, Mr. James"
        string_val: "Baclini, Miss. Helene Barbara"
        string_val: "Keefe, Mr. Arthur"
        string_val: "Cacic, Mr. Luka"
        string_val: "West, Mrs. Edwy Arthur (Ada Mary Worth)"
        string_val: "Jerwan, Mrs. Amin S (Marie Marthe Thuillard)"
        string_val: "Strandberg, Miss. Ida Sofia"
        string_val: "Clifford, Mr. George Quincy"
        string_val: "Renouf, Mr. Peter Henry"
        string_val: "Braund, Mr. Lewis Richard"
        string_val: "Karlsson, Mr. Nils August"
        string_val: "Hirvonen, Miss. Hildur E"
        string_val: "Goodwin, Master. Harold Victor"
        string_val: "Frost, Mr. Anthony Wood \"Archie\""
        string_val: "Rouse, Mr. Richard Henry"
        string_val: "Turkula, Mrs. (Hedwig)"
        string_val: "Bishop, Mr. Dickinson H"
        string_val: "Lefebre, Miss. Jeannie"
        string_val: "Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)"
        string_val: "Kent, Mr. Edward Austin"
        string_val: "Somerton, Mr. Francis William"
        string_val: "Coutts, Master. Eden Leslie \"Neville\""
        string_val: "Hagland, Mr. Konrad Mathias Reiersen"
        string_val: "Windelov, Mr. Einar"
        string_val: "Molson, Mr. Harry Markland"
        string_val: "Artagaveytia, Mr. Ramon"
        string_val: "Stanley, Mr. Edward Roland"
        string_val: "Yousseff, Mr. Gerious"
        string_val: "Eustis, Miss. Elizabeth Mussey"
        string_val: "Shellard, Mr. Frederick William"
        string_val: "Allison, Mrs. Hudson J C (Bessie Waldo Daniels)"
        string_val: "Svensson, Mr. Olof"
        string_val: "Calic, Mr. Petar"
        string_val: "Canavan, Miss. Mary"
        string_val: "O\'Sullivan, Miss. Bridget Mary"
        string_val: "Laitinen, Miss. Kristina Sofia"
        string_val: "Maioni, Miss. Roberta"
        string_val: "Penasco y Castellana, Mr. Victor de Satode"
        string_val: "Quick, Mrs. Frederick Charles (Jane Richards)"
        string_val: "Bradley, Mr. George (\"George Arthur Brayton\")"
        string_val: "Olsen, Mr. Henry Margido"
        string_val: "Lang, Mr. Fang"
        string_val: "Daly, Mr. Eugene Patrick"
        string_val: "Webber, Mr. James"
        string_val: "McGough, Mr. James Robert"
        string_val: "Rothschild, Mrs. Martin (Elizabeth L. Barrett)"
        string_val: "Coleff, Mr. Satio"
        string_val: "Walker, Mr. William Anderson"
        string_val: "Lemore, Mrs. (Amelia Milley)"
        string_val: "Ryan, Mr. Patrick"
        string_val: "Angle, Mrs. William A (Florence \"Mary\" Agnes Hughes)"
        string_val: "Pavlovic, Mr. Stefo"
        string_val: "Perreault, Miss. Anne"
        string_val: "Vovk, Mr. Janko"
        string_val: "Lahoud, Mr. Sarkis"
        string_val: "Hippach, Mrs. Louis Albert (Ida Sophia Fischer)"
        string_val: "Kassem, Mr. Fared"
        string_val: "Farrell, Mr. James"
        string_val: "Ridsdale, Miss. Lucy"
        string_val: "Farthing, Mr. John"
        string_val: "Salonen, Mr. Johan Werner"
        string_val: "Hocking, Mr. Richard George"
        string_val: "Quick, Miss. Phyllis May"
        string_val: "Toufik, Mr. Nakli"
        string_val: "Elias, Mr. Joseph Jr"
        string_val: "Peter, Mrs. Catherine (Catherine Rizk)"
        string_val: "Cacic, Miss. Marija"
        string_val: "Hart, Miss. Eva Miriam"
        string_val: "Butt, Major. Archibald Willingham"
        string_val: "LeRoy, Miss. Bertha"
        string_val: "Risien, Mr. Samuel Beard"
        string_val: "Frolicher, Miss. Hedwig Margaritha"
        string_val: "Crosby, Miss. Harriet R"
        string_val: "Andersson, Miss. Ingeborg Constanzia"
        string_val: "Andersson, Miss. Sigrid Elisabeth"
        string_val: "Beane, Mr. Edward"
        string_val: "Douglas, Mr. Walter Donald"
        string_val: "Nicholson, Mr. Arthur Ernest"
        string_val: "Beane, Mrs. Edward (Ethel Clarke)"
        string_val: "Padro y Manent, Mr. Julian"
        string_val: "Goldsmith, Mr. Frank John"
        string_val: "Davies, Master. John Morgan Jr"
        string_val: "Thayer, Mr. John Borland Jr"
        string_val: "Sharp, Mr. Percival James R"
        string_val: "O\'Brien, Mr. Timothy"
        string_val: "Leeni, Mr. Fahim (\"Philip Zenni\")"
        string_val: "Ohman, Miss. Velin"
        string_val: "Wright, Mr. George"
        string_val: "Duff Gordon, Lady. (Lucille Christiana Sutherland) (\"Mrs Morgan\")"
        string_val: "Robbins, Mr. Victor"
        string_val: "Taussig, Mrs. Emil (Tillie Mandelbaum)"
        string_val: "de Messemaeker, Mrs. Guillaume Joseph (Emma)"
        string_val: "Morrow, Mr. Thomas Rowan"
        string_val: "Sivic, Mr. Husein"
        string_val: "Norman, Mr. Robert Douglas"
        string_val: "Simmons, Mr. John"
        string_val: "Meanwell, Miss. (Marion Ogden)"
        string_val: "Davies, Mr. Alfred J"
        string_val: "Stoytcheff, Mr. Ilia"
        string_val: "Palsson, Mrs. Nils (Alma Cornelia Berglund)"
        string_val: "Doharr, Mr. Tannous"
        string_val: "Jonsson, Mr. Carl"
        string_val: "Harris, Mr. George"
        string_val: "Appleton, Mrs. Edward Dale (Charlotte Lamson)"
        string_val: "Flynn, Mr. John Irwin (\"Irving\")"
        string_val: "Kelly, Miss. Mary"
        string_val: "Rush, Mr. Alfred George John"
        string_val: "Patchett, Mr. George"
        string_val: "Garside, Miss. Ethel"
        string_val: "Silvey, Mrs. William Baird (Alice Munger)"
        string_val: "Caram, Mrs. Joseph (Maria Elias)"
        string_val: "Jussila, Mr. Eiriik"
        string_val: "Christy, Miss. Julie Rachel"
        string_val: "Thayer, Mrs. John Borland (Marian Longstreth Morris)"
        string_val: "Downton, Mr. William James"
        string_val: "Ross, Mr. John Hugo"
        string_val: "Paulner, Mr. Uscher"
        string_val: "Taussig, Miss. Ruth"
        string_val: "Jarvis, Mr. John Denzil"
        string_val: "Frolicher-Stehli, Mr. Maxmillian"
        string_val: "Gilinski, Mr. Eliezer"
        string_val: "Murdlin, Mr. Joseph"
        string_val: "Rintamaki, Mr. Matti"
        string_val: "Stephenson, Mrs. Walter Bertram (Martha Eustis)"
        string_val: "Elsbury, Mr. William James"
        string_val: "Bourke, Miss. Mary"
        string_val: "Chapman, Mr. John Henry"
        string_val: "Van Impe, Mr. Jean Baptiste"
        string_val: "Leitch, Miss. Jessie Wills"
        string_val: "Johnson, Mr. Alfred"
        string_val: "Boulos, Mr. Hanna"
        string_val: "Duff Gordon, Sir. Cosmo Edmund (\"Mr Morgan\")"
        string_val: "Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)"
        string_val: "Slabenoff, Mr. Petco"
        string_val: "Harrington, Mr. Charles H"
        string_val: "Torber, Mr. Ernst William"
        string_val: "Homer, Mr. Harry (\"Mr E Haven\")"
        string_val: "Lindell, Mr. Edvard Bengtsson"
        string_val: "Karaic, Mr. Milan"
        string_val: "Daniel, Mr. Robert Williams"
        string_val: "Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)"
        string_val: "Shutes, Miss. Elizabeth W"
        string_val: "Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)"
        string_val: "Jardin, Mr. Jose Neto"
        string_val: "Murphy, Miss. Margaret Jane"
        string_val: "Horgan, Mr. John"
        string_val: "Brocklebank, Mr. William Alfred"
        string_val: "Herman, Miss. Alice"
        string_val: "Danbom, Mr. Ernst Gilbert"
        string_val: "Lobb, Mrs. William Arthur (Cordelia K Stanlick)"
        string_val: "Becker, Miss. Marion Louise"
        string_val: "Gavey, Mr. Lawrence"
        string_val: "Yasbeck, Mr. Antoni"
        string_val: "Kimball, Mr. Edwin Nelson Jr"
        string_val: "Nakid, Mr. Sahid"
        string_val: "Hansen, Mr. Henry Damsgaard"
        string_val: "Bowen, Mr. David John \"Dai\""
        string_val: "Sutton, Mr. Frederick"
        string_val: "Kirkland, Rev. Charles Leonard"
        string_val: "Longley, Miss. Gretchen Fiske"
        string_val: "Bostandyeff, Mr. Guentcho"
        string_val: "O\'Connell, Mr. Patrick D"
        string_val: "Barkworth, Mr. Algernon Henry Wilson"
        string_val: "Lundahl, Mr. Johan Svensson"
        string_val: "Stahelin-Maeglin, Dr. Max"
        string_val: "Parr, Mr. William Henry Marsh"
        string_val: "Skoog, Miss. Mabel"
        string_val: "Davis, Miss. Mary"
        string_val: "Leinonen, Mr. Antti Gustaf"
        string_val: "Collyer, Mr. Harvey"
        string_val: "Panula, Mrs. Juha (Maria Emilia Ojala)"
        string_val: "Thorneycroft, Mr. Percival"
        string_val: "Jensen, Mr. Hans Peder"
        string_val: "Sagesser, Mlle. Emma"
        string_val: "Skoog, Miss. Margit Elizabeth"
        string_val: "Foo, Mr. Choong"
        string_val: "Baclini, Miss. Eugenie"
        string_val: "Harper, Mr. Henry Sleeper"
        string_val: "Cor, Mr. Liudevit"
        string_val: "Simonius-Blumer, Col. Oberst Alfons"
        string_val: "Willey, Mr. Edward"
        string_val: "Stanley, Miss. Amy Zillah Elsie"
        string_val: "Mitkoff, Mr. Mito"
        string_val: "Doling, Miss. Elsie"
        string_val: "Kalvik, Mr. Johannes Halvorsen"
        string_val: "O\'Leary, Miss. Hanora \"Norah\""
        string_val: "Hegarty, Miss. Hanora \"Nora\""
        string_val: "Hickman, Mr. Leonard Mark"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content: "\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r`\000\000\000\000\000\000\000a\000\000\000\000\000\000\000b\000\000\000\000\000\000\000c\000\000\000\000\000\000\000d\000\000\000\000\000\000\000e\000\000\000\000\000\000\000f\000\000\000\000\000\000\000g\000\000\000\000\000\000\000h\000\000\000\000\000\000\000i\000\000\000\000\000\000\000j\000\000\000\000\000\000\000k\000\000\000\000\000\000\000l\000\000\000\000\000\000\000m\000\000\000\000\000\000\000n\000\000\000\000\000\000\000o\000\000\000\000\000\000\000p\000\000\000\000\000\000\000q\000\000\000\000\000\000\000r\000\000\000\000\000\000\000s\000\000\000\000\000\000\000t\000\000\000\000\000\000\000u\000\000\000\000\000\000\000v\000\000\000\000\000\000\000w\000\000\000\000\000\000\000x\000\000\000\000\000\000\000y\000\000\000\000\000\000\000z\000\000\000\000\000\000\000{\000\000\000\000\000\000\000|\000\000\000\000\000\000\000}\000\000\000\000\000\000\000~t\001\000\000\000\000\000\000\n\001\000\000\000\000\000\000\013\001\000\000\000\000\000\000\014\001\000\000\000\000\000\000\r\001\000\000\000\000\000\000\016\001\000\000\000\000\000\000\017\001\000\000\000\000\000\000\020\001\000\000\000\000\000\000\021\001\000\000\000\000\000\000\022\001\000\000\000\000\000\000\023\001\000\000\000\000\000\000\024\001\000\000\000\000\000\000\025\001\000\000\000\000\000\000\026\001\000\000\000\000\000\000\027\001\000\000\000\000\000\000\030\001\000\000\000\000\000\000\031\001\000\000\000\000\000\000\032\001\000\000\000\000\000\000\033\001\000\000\000\000\000\000\034\001\000\000\000\000\000\000\035\001\000\000\000\000\000\000\036\001\000\000\000\000\000\000\037\001\000\000\000\000\000\000 \001\000\000\000\000\000\000!\001\000\000\000\000\000\000\"\001\000\000\000\000\000\000#\001\000\000\000\000\000\000$\001\000\000\000\000\000\000%\001\000\000\000\000\000\000&\001\000\000\000\000\000\000\'\001\000\000\000\000\000\000(\001\000\000\000\000\000\000)\001\000\000\000\000\000\000*\001\000\000\000\000\000\000+\001\000\000\000\000\000\000,\001\000\000\000\000\000\000-\001\000\000\000\000\000\000.\001\000\000\000\000\000\000/\001\000\000\000\000\000\0000\001\000\000\000\000\000\0001\001\000\000\000\000\000\0002\001\000\000\000\000\000\0003\001\000\000\000\000\000\0004\001\000\000\000\000\000\0005\001\000\000\000\000\000\0006\001\000\000\000\000\000\0007\001\000\000\000\000\000\0008\001\000\000\000\000\000\0009\001\000\000\000\000\000\000:\001\000\000\000\000\000\000;\001\000\000\000\000\000\000<\001\000\000\000\000\000\000=\001\000\000\000\000\000\000>\001\000\000\000\000\000\000?\001\000\000\000\000\000\000@\001\000\000\000\000\000\000A\001\000\000\000\000\000\000B\001\000\000\000\000\000\000C\001\000\000\000\000\000\000D\001\000\000\000\000\000\000E\001\000\000\000\000\000\000F\001\000\000\000\000\000\000G\001\000\000\000\000\000\000H\001\000\000\000\000\000\000I\001\000\000\000\000\000\000J\001\000\000\000\000\000\000K\001\000\000\000\000\000\000L\001\000\000\000\000\000\000M\001\000\000\000\000\000\000N\001\000\000\000\000\000\000O\001\000\000\000\000\000\000P\001\000\000\000\000\000\000Q\001\000\000\000\000\000\000R\001\000\000\000\000\000\000S\001\000\000\000\000\000\000T\001\000\000\000\000\000\000U\001\000\000\000\000\000\000V\001\000\000\000\000\000\000W\001\000\000\000\000\000\000X\001\000\000\000\000\000\000Y\001\000\000\000\000\000\000Z\001\000\000\000\000\000\000[\001\000\000\000\000\000\000\\\001\000\000\000\000\000\000]\001\000\000\000\000\000\000^\001\000\000\000\000\000\000_\001\000\000\000\000\000\000`\001\000\000\000\000\000\000a\001\000\000\000\000\000\000b\001\000\000\000\000\000\000c\001\000\000\000\000\000\000d\001\000\000\000\000\000\000e\001\000\000\000\000\000\000f\001\000\000\000\000\000\000g\001\000\000\000\000\000\000h\001\000\000\000\000\000\000i\001\000\000\000\000\000\000j\001\000\000\000\000\000\000k\001\000\000\000\000\000\000l\001\000\000\000\000\000\000m\001\000\000\000\000\000\000n\001\000\000\000\000\000\000o\001\000\000\000\000\000\000p\001\000\000\000\000\000\000q\001\000\000\000\000\000\000r\001\000\000\000\000\000\000s\001\000\000\000\000\000\000t\001\000\000\000\000\000\000u\001\000\000\000\000\000\000v\001\000\000\000\000\000\000w\001\000\000\000\000\000\000x\001\000\000\000\000\000\000y\001\000\000\000\000\000\000z\001\000\000\000\000\000\000{\001\000\000\000\000\000\000|\001\000\000\000\000\000\000}\001\000\000\000\000\000\000~t\002\000\000\000\000\000\000\n\002\000\000\000\000\000\000\013\002\000\000\000\000\000\000\014\002\000\000\000\000\000\000\r`\002\000\000\000\000\000\000a\002\000\000\000\000\000\000b\002\000\000\000\000\000\000c\002\000\000\000\000\000\000d\002\000\000\000\000\000\000e\002\000\000\000\000\000\000f\002\000\000\000\000\000\000g\002\000\000\000\000\000\000h\002\000\000\000\000\000\000i\002\000\000\000\000\000\000j\002\000\000\000\000\000\000k\002\000\000\000\000\000\000l\002\000\000\000\000\000\000m\002\000\000\000\000\000\000n\002\000\000\000\000\000\000o\002\000\000\000\000\000\000p\002\000\000\000\000\000\000q\002\000\000\000\000\000\000r\002\000\000\000\000\000\000s\002\000\000\000\000\000\000t\002\000\000\000\000\000\000u\002\000\000\000\000\000\000v\002\000\000\000\000\000\000w\002\000\000\000\000\000\000x\002\000\000\000\000\000\000y\002\000\000\000\000\000\000z\002\000\000\000\000\000\000{\002\000\000\000\000\000\000|\002\000\000\000\000\000\000}\002\000\000\000\000\000\000~
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 655
          }
        }
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "male"
        string_val: "female"
        string_val: "female"
        string_val: "male"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 655
          }
        }
        string_val: "PC 17599"
        string_val: "STON/O2. 3101282"
        string_val: "113803"
        string_val: "373450"
        string_val: "330877"
        string_val: "17463"
        string_val: "349909"
        string_val: "347742"
        string_val: "237736"
        string_val: "PP 9549"
        string_val: "113783"
        string_val: "A/5. 2151"
        string_val: "347082"
        string_val: "350406"
        string_val: "248706"
        string_val: "382652"
        string_val: "244373"
        string_val: "345763"
        string_val: "2649"
        string_val: "239865"
        string_val: "248698"
        string_val: "330923"
        string_val: "113788"
        string_val: "349909"
        string_val: "347077"
        string_val: "2631"
        string_val: "19950"
        string_val: "330959"
        string_val: "349216"
        string_val: "PC 17601"
        string_val: "PC 17569"
        string_val: "335677"
        string_val: "C.A. 24579"
        string_val: "PC 17604"
        string_val: "113789"
        string_val: "2677"
        string_val: "A./5. 2152"
        string_val: "345764"
        string_val: "2651"
        string_val: "7546"
        string_val: "11668"
        string_val: "349253"
        string_val: "SC/Paris 2123"
        string_val: "330958"
        string_val: "S.C./A.4. 23567"
        string_val: "370371"
        string_val: "14311"
        string_val: "2662"
        string_val: "349237"
        string_val: "3101295"
        string_val: "A/4. 39886"
        string_val: "PC 17572"
        string_val: "2926"
        string_val: "113509"
        string_val: "19947"
        string_val: "C.A. 31026"
        string_val: "2697"
        string_val: "C.A. 34651"
        string_val: "CA 2144"
        string_val: "2669"
        string_val: "113572"
        string_val: "36973"
        string_val: "347088"
        string_val: "PC 17605"
        string_val: "2661"
        string_val: "C.A. 29395"
        string_val: "S.P. 3464"
        string_val: "3101281"
        string_val: "315151"
        string_val: "C.A. 33111"
        string_val: "CA 2144"
        string_val: "S.O.C. 14879"
        string_val: "2680"
        string_val: "1601"
        string_val: "348123"
        string_val: "349208"
        string_val: "374746"
        string_val: "248738"
        string_val: "364516"
        string_val: "345767"
        string_val: "345779"
        string_val: "330932"
        string_val: "113059"
        string_val: "SO/C 14885"
        string_val: "3101278"
        string_val: "W./C. 6608"
        string_val: "SOTON/OQ 392086"
        string_val: "19950"
        string_val: "343275"
        string_val: "343276"
        string_val: "347466"
        string_val: "W.E.P. 5734"
        string_val: "C.A. 2315"
        string_val: "364500"
        string_val: "374910"
        string_val: "PC 17754"
        string_val: "PC 17759"
        string_val: "231919"
        string_val: "244367"
        string_val: "349245"
        string_val: "349215"
        string_val: "35281"
        string_val: "7540"
        string_val: "3101276"
        string_val: "349207"
        string_val: "343120"
        string_val: "312991"
        string_val: "349249"
        string_val: "371110"
        string_val: "110465"
        string_val: "2665"
        string_val: "324669"
        string_val: "4136"
        string_val: "2627"
        string_val: "STON/O 2. 3101294"
        string_val: "370369"
        string_val: "11668"
        string_val: "PC 17558"
        string_val: "347082"
        string_val: "S.O.C. 14879"
        string_val: "A4. 54510"
        string_val: "237736"
        string_val: "27267"
        string_val: "35281"
        string_val: "2651"
        string_val: "370372"
        string_val: "C 17369"
        string_val: "2668"
        string_val: "347061"
        string_val: "349241"
        string_val: "SOTON/O.Q. 3101307"
        string_val: "A/5. 3337"
        string_val: "228414"
        string_val: "C.A. 29178"
        string_val: "SC/PARIS 2133"
        string_val: "11752"
        string_val: "113803"
        string_val: "7534"
        string_val: "PC 17593"
        string_val: "2678"
        string_val: "347081"
        string_val: "STON/O2. 3101279"
        string_val: "365222"
        string_val: "231945"
        string_val: "C.A. 33112"
        string_val: "350043"
        string_val: "W./C. 6608"
        string_val: "230080"
        string_val: "244310"
        string_val: "S.O.P. 1166"
        string_val: "113776"
        string_val: "A.5. 11206"
        string_val: "A/5. 851"
        string_val: "Fa 265302"
        string_val: "PC 17597"
        string_val: "35851"
        string_val: "SOTON/OQ 392090"
        string_val: "315037"
        string_val: "CA. 2343"
        string_val: "371362"
        string_val: "C.A. 33595"
        string_val: "347068"
        string_val: "315093"
        string_val: "3101295"
        string_val: "363291"
        string_val: "113505"
        string_val: "347088"
        string_val: "PC 17318"
        string_val: "1601"
        string_val: "111240"
        string_val: "382652"
        string_val: "347742"
        string_val: "STON/O 2. 3101280"
        string_val: "17764"
        string_val: "350404"
        string_val: "4133"
        string_val: "PC 17595"
        string_val: "250653"
        string_val: "LINE"
        string_val: "CA. 2343"
        string_val: "SC/PARIS 2131"
        string_val: "347077"
        string_val: "230136"
        string_val: "315153"
        string_val: "113767"
        string_val: "370365"
        string_val: "111428"
        string_val: "364849"
        string_val: "349247"
        string_val: "234604"
        string_val: "28424"
        string_val: "350046"
        string_val: "230080"
        string_val: "PC 17610"
        string_val: "PC 17569"
        string_val: "368703"
        string_val: "4579"
        string_val: "370370"
        string_val: "248747"
        string_val: "345770"
        string_val: "CA. 2343"
        string_val: "3101264"
        string_val: "2628"
        string_val: "A/5 3540"
        string_val: "347054"
        string_val: "3101278"
        string_val: "2699"
        string_val: "367231"
        string_val: "112277"
        string_val: "SOTON/O.Q. 3101311"
        string_val: "F.C.C. 13528"
        string_val: "A/5 21174"
        string_val: "250646"
        string_val: "367229"
        string_val: "35273"
        string_val: "STON/O2. 3101283"
        string_val: "243847"
        string_val: "11813"
        string_val: "W/C 14208"
        string_val: "SOTON/OQ 392089"
        string_val: "220367"
        string_val: "21440"
        string_val: "349234"
        string_val: "19943"
        string_val: "PP 4348"
        string_val: "SW/PP 751"
        string_val: "A/5 21173"
        string_val: "236171"
        string_val: "4133"
        string_val: "36973"
        string_val: "347067"
        string_val: "237442"
        string_val: "347077"
        string_val: "C.A. 29566"
        string_val: "W./C. 6609"
        string_val: "26707"
        string_val: "C.A. 31921"
        string_val: "28665"
        string_val: "SCO/W 1585"
        string_val: "2665"
        string_val: "367230"
        string_val: "W./C. 14263"
        string_val: "STON/O 2. 3101275"
        string_val: "2694"
        string_val: "19928"
        string_val: "347071"
        string_val: "250649"
        string_val: "11751"
        string_val: "244252"
        string_val: "362316"
        string_val: "347054"
        string_val: "113514"
        string_val: "A/5. 3336"
        string_val: "370129"
        string_val: "2650"
        string_val: "PC 17585"
        string_val: "110152"
        string_val: "PC 17755"
        string_val: "230433"
        string_val: "384461"
        string_val: "347077"
        string_val: "110413"
        string_val: "112059"
        string_val: "382649"
        string_val: "C.A. 17248"
        string_val: "3101295"
        string_val: "347083"
        string_val: "PC 17582"
        string_val: "PC 17760"
        string_val: "113798"
        string_val: "LINE"
        string_val: "250644"
        string_val: "PC 17596"
        string_val: "370375"
        string_val: "13502"
        string_val: "347073"
        string_val: "239853"
        string_val: "382652"
        string_val: "C.A. 2673"
        string_val: "336439"
        string_val: "347464"
        string_val: "345778"
        string_val: "A/5. 10482"
        string_val: "113056"
        string_val: "349239"
        string_val: "345774"
        string_val: "349206"
        string_val: "237798"
        string_val: "370373"
        string_val: "19877"
        string_val: "11967"
        string_val: "SC/Paris 2163"
        string_val: "349236"
        string_val: "349233"
        string_val: "PC 17612"
        string_val: "2693"
        string_val: "113781"
        string_val: "19988"
        string_val: "PC 17558"
        string_val: "9234"
        string_val: "367226"
        string_val: "LINE"
        string_val: "226593"
        string_val: "A/5 2466"
        string_val: "113781"
        string_val: "17421"
        string_val: "PC 17758"
        string_val: "P/PP 3381"
        string_val: "PC 17485"
        string_val: "11767"
        string_val: "PC 17608"
        string_val: "250651"
        string_val: "349243"
        string_val: "F.C.C. 13529"
        string_val: "347470"
        string_val: "244367"
        string_val: "29011"
        string_val: "36928"
        string_val: "16966"
        string_val: "A/5 21172"
        string_val: "349219"
        string_val: "234818"
        string_val: "248738"
        string_val: "CA. 2343"
        string_val: "PC 17760"
        string_val: "345364"
        string_val: "28551"
        string_val: "363291"
        string_val: "111361"
        string_val: "367226"
        string_val: "113043"
        string_val: "PC 17582"
        string_val: "345764"
        string_val: "PC 17611"
        string_val: "349225"
        string_val: "113776"
        string_val: "16966"
        string_val: "7598"
        string_val: "113784"
        string_val: "230080"
        string_val: "19950"
        string_val: "248740"
        string_val: "244361"
        string_val: "229236"
        string_val: "248733"
        string_val: "31418"
        string_val: "386525"
        string_val: "C.A. 37671"
        string_val: "315088"
        string_val: "7267"
        string_val: "113510"
        string_val: "2695"
        string_val: "349237"
        string_val: "2647"
        string_val: "345783"
        string_val: "113505"
        string_val: "237671"
        string_val: "330931"
        string_val: "330980"
        string_val: "347088"
        string_val: "SC/PARIS 2167"
        string_val: "2691"
        string_val: "SOTON/O.Q. 3101310"
        string_val: "370365"
        string_val: "C 7076"
        string_val: "110813"
        string_val: "2626"
        string_val: "14313"
        string_val: "PC 17477"
        string_val: "11765"
        string_val: "3101267"
        string_val: "323951"
        string_val: "PC 17760"
        string_val: "349909"
        string_val: "PC 17604"
        string_val: "C 7077"
        string_val: "113503"
        string_val: "2648"
        string_val: "347069"
        string_val: "PC 17757"
        string_val: "2653"
        string_val: "STON/O 2. 3101293"
        string_val: "113789"
        string_val: "349227"
        string_val: "S.O.C. 14879"
        string_val: "CA 2144"
        string_val: "27849"
        string_val: "367655"
        string_val: "SC 1748"
        string_val: "113760"
        string_val: "350034"
        string_val: "3101277"
        string_val: "35273"
        string_val: "PP 9549"
        string_val: "350052"
        string_val: "350407"
        string_val: "28403"
        string_val: "244278"
        string_val: "240929"
        string_val: "STON/O 2. 3101289"
        string_val: "341826"
        string_val: "4137"
        string_val: "STON/O2. 3101279"
        string_val: "315096"
        string_val: "28664"
        string_val: "347064"
        string_val: "29106"
        string_val: "312992"
        string_val: "4133"
        string_val: "349222"
        string_val: "394140"
        string_val: "19928"
        string_val: "239853"
        string_val: "STON/O 2. 3101269"
        string_val: "343095"
        string_val: "28220"
        string_val: "250652"
        string_val: "28228"
        string_val: "345773"
        string_val: "349254"
        string_val: "A/5. 13032"
        string_val: "315082"
        string_val: "347080"
        string_val: "370129"
        string_val: "A/4. 34244"
        string_val: "2003"
        string_val: "250655"
        string_val: "364851"
        string_val: "SOTON/O.Q. 392078"
        string_val: "110564"
        string_val: "376564"
        string_val: "SC/AH 3085"
        string_val: "STON/O 2. 3101274"
        string_val: "13507"
        string_val: "113760"
        string_val: "W./C. 6608"
        string_val: "29106"
        string_val: "19950"
        string_val: "C.A. 18723"
        string_val: "F.C.C. 13529"
        string_val: "345769"
        string_val: "347076"
        string_val: "230434"
        string_val: "65306"
        string_val: "33638"
        string_val: "250644"
        string_val: "113794"
        string_val: "2666"
        string_val: "113786"
        string_val: "C.A. 34651"
        string_val: "65303"
        string_val: "113051"
        string_val: "17453"
        string_val: "A/5 2817"
        string_val: "349240"
        string_val: "13509"
        string_val: "17464"
        string_val: "F.C.C. 13531"
        string_val: "371060"
        string_val: "19952"
        string_val: "364506"
        string_val: "111320"
        string_val: "234360"
        string_val: "A/S 2816"
        string_val: "SOTON/O.Q. 3101306"
        string_val: "239853"
        string_val: "113792"
        string_val: "36209"
        string_val: "2666"
        string_val: "323592"
        string_val: "315089"
        string_val: "C.A. 34651"
        string_val: "SC/AH Basle 541"
        string_val: "7553"
        string_val: "110465"
        string_val: "31027"
        string_val: "3460"
        string_val: "350060"
        string_val: "3101298"
        string_val: "CA 2144"
        string_val: "239854"
        string_val: "A/5 3594"
        string_val: "4134"
        string_val: "11967"
        string_val: "4133"
        string_val: "19943"
        string_val: "11771"
        string_val: "A.5. 18509"
        string_val: "C.A. 37671"
        string_val: "65304"
        string_val: "SOTON/OQ 3101317"
        string_val: "113787"
        string_val: "PC 17609"
        string_val: "A/4 45380"
        string_val: "2627"
        string_val: "36947"
        string_val: "C.A. 6212"
        string_val: "113781"
        string_val: "350035"
        string_val: "315086"
        string_val: "364846"
        string_val: "330909"
        string_val: "4135"
        string_val: "110152"
        string_val: "PC 17758"
        string_val: "26360"
        string_val: "111427"
        string_val: "C 4001"
        string_val: "1601"
        string_val: "382651"
        string_val: "SOTON/OQ 3101316"
        string_val: "PC 17473"
        string_val: "PC 17603"
        string_val: "349209"
        string_val: "36967"
        string_val: "C.A. 34260"
        string_val: "371110"
        string_val: "226875"
        string_val: "349242"
        string_val: "12749"
        string_val: "349252"
        string_val: "2624"
        string_val: "111361"
        string_val: "2700"
        string_val: "367232"
        string_val: "W./C. 14258"
        string_val: "PC 17483"
        string_val: "3101296"
        string_val: "29104"
        string_val: "26360"
        string_val: "2641"
        string_val: "2690"
        string_val: "2668"
        string_val: "315084"
        string_val: "F.C.C. 13529"
        string_val: "113050"
        string_val: "PC 17761"
        string_val: "364498"
        string_val: "13568"
        string_val: "WE/P 5735"
        string_val: "347082"
        string_val: "347082"
        string_val: "2908"
        string_val: "PC 17761"
        string_val: "693"
        string_val: "2908"
        string_val: "SC/PARIS 2146"
        string_val: "363291"
        string_val: "C.A. 33112"
        string_val: "17421"
        string_val: "244358"
        string_val: "330979"
        string_val: "2620"
        string_val: "347085"
        string_val: "113807"
        string_val: "11755"
        string_val: "PC 17757"
        string_val: "110413"
        string_val: "345572"
        string_val: "372622"
        string_val: "349251"
        string_val: "218629"
        string_val: "SOTON/OQ 392082"
        string_val: "SOTON/O.Q. 392087"
        string_val: "A/4 48871"
        string_val: "349205"
        string_val: "349909"
        string_val: "2686"
        string_val: "350417"
        string_val: "S.W./PP 752"
        string_val: "11769"
        string_val: "PC 17474"
        string_val: "14312"
        string_val: "A/4. 20589"
        string_val: "358585"
        string_val: "243880"
        string_val: "13507"
        string_val: "2689"
        string_val: "STON/O 2. 3101286"
        string_val: "237789"
        string_val: "17421"
        string_val: "28403"
        string_val: "13049"
        string_val: "3411"
        string_val: "110413"
        string_val: "237565"
        string_val: "13567"
        string_val: "14973"
        string_val: "A./5. 3235"
        string_val: "STON/O 2. 3101273"
        string_val: "36947"
        string_val: "A/5 3902"
        string_val: "364848"
        string_val: "SC/AH 29037"
        string_val: "345773"
        string_val: "248727"
        string_val: "LINE"
        string_val: "2664"
        string_val: "PC 17485"
        string_val: "243847"
        string_val: "349214"
        string_val: "113796"
        string_val: "364511"
        string_val: "111426"
        string_val: "349910"
        string_val: "349246"
        string_val: "113804"
        string_val: "SC/Paris 2123"
        string_val: "PC 17582"
        string_val: "347082"
        string_val: "SOTON/O.Q. 3101305"
        string_val: "367230"
        string_val: "370377"
        string_val: "364512"
        string_val: "220845"
        string_val: "347080"
        string_val: "A/5. 3336"
        string_val: "230136"
        string_val: "31028"
        string_val: "2659"
        string_val: "11753"
        string_val: "2653"
        string_val: "350029"
        string_val: "54636"
        string_val: "36963"
        string_val: "219533"
        string_val: "13502"
        string_val: "349224"
        string_val: "334912"
        string_val: "27042"
        string_val: "347743"
        string_val: "13214"
        string_val: "112052"
        string_val: "347088"
        string_val: "237668"
        string_val: "STON/O 2. 3101292"
        string_val: "C.A. 31921"
        string_val: "3101295"
        string_val: "376564"
        string_val: "350050"
        string_val: "PC 17477"
        string_val: "347088"
        string_val: "1601"
        string_val: "2666"
        string_val: "PC 17572"
        string_val: "349231"
        string_val: "13213"
        string_val: "S.O./P.P. 751"
        string_val: "CA. 2314"
        string_val: "349221"
        string_val: "231919"
        string_val: "8475"
        string_val: "330919"
        string_val: "365226"
        string_val: "S.O.C. 14879"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 655
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 655
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_STRING
        type: DT_DOUBLE
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "C"
        string_val: "S"
        string_val: "Q"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_0b8dd6db-1a7e-496d-8ce3-28a1c145c847"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Const"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/ignore_value"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\005\000\000\000\003\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_ff39de81-00c6-419e-886e-9d51c119c512"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/ignore_value"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_7bbce9d6-d1d7-4783-818b-84365be2cee1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "female"
        string_val: "male"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_85c75a0b-a0ab-49df-9764-745613de1e4b"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Const"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/ignore_value"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 7
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\003\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_10f47d79-007f-443c-ae63-d1a98cf4f00b"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/Cast"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/Age_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Fare_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\027\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19933664798736572
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19933664798736572
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_10053"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_10052"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1530931144952774
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1530931144952774
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_10123"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_10122"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2156655490398407
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2156655490398407
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_10192"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_10191"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "head/predictions/two_class_logits"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/Cast"
  op: "Cast"
  input: "head/losses/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/Cast"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/Cast:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/Cast"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_10317"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_10316"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/Cast:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/Cast"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_10342"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_10341"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/Cast"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/Select"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/Select_1"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "head/losses/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/sub"
  op: "Sub"
  input: "head/losses/logistic_loss/Select"
  input: "head/losses/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/Exp"
  op: "Exp"
  input: "head/losses/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss/Log1p"
  op: "Log1p"
  input: "head/losses/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logistic_loss"
  op: "Add"
  input: "head/losses/logistic_loss/sub"
  input: "head/losses/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "head/losses/logistic_loss"
  input: "^head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like"
  op: "Fill"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like/Shape"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights"
  op: "Mul"
  input: "head/losses/weighted_loss/Cast/x"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/logistic_loss"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/Fill"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/Fill"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/logistic_loss"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape"
  op: "Shape"
  input: "head/losses/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "head/losses/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "head/losses/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "head/losses/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Neg"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/add"
  op: "AddV2"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/add/x"
  input: "head/losses/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss_grad/Reshape_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/zeros_like"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape_1"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Log1p_grad/mul"
  input: "head/losses/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "head/losses/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Exp_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "head/losses/logistic_loss/GreaterEqual"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/zeros_like"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/Select"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Select_1_grad/Select_1"
  input: "training/Adam/gradients/gradients/head/losses/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/gradients/gradients/head/losses/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/AddN"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "training/Adam/gradients/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "training/Adam/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/learning_rate"
    }
  }
}
node {
  name: "training/Adam/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/learning_rate"
  input: "training/Adam/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\027\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\027\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "training/Adam/Identity/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^training/Adam/Adam/AssignAddVariableOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
  input: "^training/Adam/learning_rate/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 23
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/learning_rate"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 23
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/learning_rate"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^dnn/input_from_feature_columns/input_layer/Embarked_indicator_1/Embarked_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^dnn/input_from_feature_columns/input_layer/Parch_indicator_1/Parch_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^dnn/input_from_feature_columns/input_layer/Pclass_indicator_1/Pclass_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^dnn/input_from_feature_columns/input_layer/Sex_indicator_1/Sex_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^dnn/input_from_feature_columns/input_layer/SibSp_indicator_1/SibSp_lookup/hash_table/table_init/LookupTableImportV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_fe2d49386d19455fba0f81ad8df7f5c6/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/learning_rate"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/learning_rate/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "training/Adam/learning_rate"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_10122"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 128
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_10123"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 128
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_10317"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_cast"
        type: DT_FLOAT
      }
      input_arg {
        name: "assert_head_losses_check_label_range_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be <= n_classes - 1"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x <= y did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/Cast:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (head/losses/check_label_range/Const:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_cast"
      input: "Assert/data_4:output:0"
      input: "assert_head_losses_check_label_range_const"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_10192"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_9777"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_9778"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_10191"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_10316"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_10341"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_10342"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_cast"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be >= 0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x >= 0 did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/Cast:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_cast"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_10053"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 128
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_10052"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 128
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
